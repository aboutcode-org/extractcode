[
  [
    "a/src/3rdParty/webkit/work/WebCore/css/CSSParser.cpp.orig", 
    "b/src/3rdParty/webkit/work/WebCore/css/CSSParser.cpp", 
    [
      "--- a/src/3rdParty/webkit/work/WebCore/css/CSSParser.cpp.orig", 
      "+++ b/src/3rdParty/webkit/work/WebCore/css/CSSParser.cpp", 
      "@@ -3374,30 +3374,30 @@ public:", 
      ", m_allowSingleArgument(false)", 
      ", m_unit(CSSParser::FUnknown)", 
      "{", 
      "-        if (fname == \"scale(\" || fname == \"scaleX(\" || fname == \"scaleY(\") {", 
      "+        if (fname == \"scale(\" || fname == \"scalex(\" || fname == \"scaley(\") {", 
      "m_unit = CSSParser::FNumber;", 
      "if (fname == \"scale(\")", 
      "m_type = CSSTransformValue::ScaleTransformOperation;", 
      "-            else if (fname == \"scaleX(\")", 
      "+            else if (fname == \"scalex(\")", 
      "m_type = CSSTransformValue::ScaleXTransformOperation;", 
      "else", 
      "m_type = CSSTransformValue::ScaleYTransformOperation;", 
      "} else if (fname == \"rotate(\") {", 
      "m_type = CSSTransformValue::RotateTransformOperation;", 
      "m_unit = CSSParser::FAngle;", 
      "-        } else if (fname == \"skew(\" || fname == \"skewX(\" || fname == \"skewY(\") {", 
      "+        } else if (fname == \"skew(\" || fname == \"skewx(\" || fname == \"skewy(\") {", 
      "m_unit = CSSParser::FAngle;", 
      "if (fname == \"skew(\")", 
      "m_type = CSSTransformValue::SkewTransformOperation;", 
      "-            else if (fname == \"skewX(\")", 
      "+            else if (fname == \"skewx(\")", 
      "m_type = CSSTransformValue::SkewXTransformOperation;", 
      "else", 
      "m_type = CSSTransformValue::SkewYTransformOperation;", 
      "-        } else if (fname == \"translate(\" || fname == \"translateX(\" || fname == \"translateY(\") {", 
      "+        } else if (fname == \"translate(\" || fname == \"translatex(\" || fname == \"translatey(\") {", 
      "m_unit = CSSParser::FLength | CSSParser::FPercent;", 
      "if (fname == \"translate(\")", 
      "m_type = CSSTransformValue::TranslateTransformOperation;", 
      "-            else if (fname == \"translateX(\")", 
      "+            else if (fname == \"translatex(\")", 
      "m_type = CSSTransformValue::TranslateXTransformOperation;", 
      "else", 
      "m_type = CSSTransformValue::TranslateYTransformOperation;"
    ]
  ]
]