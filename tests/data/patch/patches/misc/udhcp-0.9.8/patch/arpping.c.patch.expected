[
  [
    "udhcp-0.9.8.orig/arpping.c", 
    "udhcp-0.9.8/arpping.c", 
    [
      "Index: udhcp-0.9.8/arpping.c", 
      "===================================================================", 
      "--- udhcp-0.9.8.orig/arpping.c", 
      "+++ udhcp-0.9.8/arpping.c", 
      "@@ -67,8 +67,11 @@ int arpping(u_int32_t yiaddr, u_int32_t", 
      "arp.hlen = 6;\t\t\t\t\t/* hardware address length */", 
      "arp.plen = 4;\t\t\t\t\t/* protocol address length */", 
      "arp.operation = htons(ARPOP_REQUEST);\t\t/* ARP op code */", 
      "-\t*((u_int *) arp.sInaddr) = ip;\t\t\t/* source IP address */", 
      "+\t/* A gratuitous ARP request is an ARP request packet where the source and destination IP are both set to the IP of the machine issuing the packet and the destination MAC is the broadcast address ff:ff:ff:ff:ff:ff. Ordinarily, no reply packet will occur. A gratuitous ARP reply is a reply to which no request has been made.", 
      "+\tSo setting arp.sInaddr to 0 which differ from arp.tInaddr, then we can get the reply if exist the same IP address. */", 
      "+\t*((u_int *) arp.sInaddr) = 0;\t\t\t/* source IP address */", 
      "memcpy(arp.sHaddr, mac, 6);\t\t\t/* source hardware address */", 
      "+\tmemcpy(arp.tHaddr, MAC_BCAST_ADDR, 6);\t\t/* target hardware address , set the same value of MAC DA*/", 
      "*((u_int *) arp.tInaddr) = yiaddr;\t\t/* target IP address */", 
      "", 
      "memset(&addr, 0, sizeof(addr));", 
      "@@ -95,6 +98,16 @@ int arpping(u_int32_t yiaddr, u_int32_t", 
      "rv = 0;", 
      "break;", 
      "}", 
      "+\t\t\t// Our stb can send ARP reply, but its message arp.tHaddr equal to arp.sHaddr,", 
      "+\t\t\t// following condition will fit for this address conflicts.", 
      "+\t\t\tif ((arp.operation == htons(ARPOP_REPLY)) &&", 
      "+\t\t\t    (bcmp(arp.tHaddr, arp.sHaddr, 6) == 0) &&", 
      "+\t\t\t    (*((u_int *) arp.sInaddr) == yiaddr)) {", 
      "+\t\t\t\tDEBUG(LOG_INFO, \"Valid arp reply receved for this address from stb\");", 
      "+\t\t\t\trv = 0;", 
      "+\t\t\t\tbreak;", 
      "+\t\t\t}", 
      "+", 
      "}", 
      "timeout -= time(NULL) - prevTime;", 
      "time(&prevTime);"
    ]
  ]
]