[('ElectricFence-2.2.2/efence.c.jj',
  'ElectricFence-2.2.2/efence.c',
  '--- ElectricFence-2.2.2/efence.c.jj\n+++ ElectricFence-2.2.2/efence.c\n@@ -174,6 +174,15 @@ static int\t\tinternalUse = 0;\nstatic int\t\tnoAllocationListProtection = 0;\n\n#ifdef USE_SEMAPHORE\n+\n+#include <stdbool.h>\n+\n+#pragma weak sem_init\n+#pragma weak sem_post\n+#pragma weak sem_wait\n+\n+static int\t\tpthread_initialization = 0;\n+\n/*\n* EF_sem is a semaphore used to allow one thread at a time into\n* these routines.\n@@ -274,7 +283,7 @@ initialize(void)\nEF_Print(version);\n\n#ifdef USE_SEMAPHORE\n-\tif (sem_init(&EF_sem, 0, 1) >= 0) {\n+\tif (sem_init != NULL && !pthread_initialization && sem_init(&EF_sem, 0, 1) >= 0) {\nsemEnabled = 1;\n}\n#endif\n@@ -397,6 +406,21 @@ initialize(void)\nrelease();\n}\n\n+#ifdef USE_SEMAPHORE\n+void\n+__libc_malloc_pthread_startup (bool first_time)\n+{\n+\tif (first_time) {\n+\t\tpthread_initialization = 1;\n+\t\tinitialize ();\n+\t} else {\n+\t\tpthread_initialization = 0;\n+\t\tif (!semEnabled && sem_init != NULL && sem_init(&EF_sem, 0, 1) >= 0)\n+\t\t\tsemEnabled = 1;\n+\t}\n+}\n+#endif\n+\n/*\n* allocateMoreSlots is called when there are only enough slot structures\n* left to support the allocation of a single malloc buffer.'),
 ('ElectricFence-2.2.2/Makefile.jj',
  'ElectricFence-2.2.2/Makefile',
  '--- ElectricFence-2.2.2/Makefile.jj\n+++ ElectricFence-2.2.2/Makefile\n@@ -1,6 +1,6 @@\nPIC= -fPIC\nCFLAGS= -g -DUSE_SEMAPHORE $(PIC)\n-LIBS= -lpthread\n+LIBS=\n\nprefix=/usr\nBIN_INSTALL_DIR= $(prefix)/bin\n@@ -54,8 +54,8 @@ libefence.a: $(OBJECTS)\n$(AR) crv libefence.a $(OBJECTS)\n\nlibefence.so.0.0: $(OBJECTS)\n-\tgcc -g -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \\\n-\t\t$(OBJECTS) -lpthread -lc\n+\tgcc -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \\\n+\t\t$(CFLAGS) $(OBJECTS)\n\ntstheap: libefence.a tstheap.o\n- rm -f tstheap')]