[('linux-2.6.23.orig/drivers/mtd/maps/Kconfig',
  'linux-2.6.23/drivers/mtd/maps/Kconfig',
  'Index: linux-2.6.23/drivers/mtd/maps/Kconfig\n===================================================================\n--- linux-2.6.23.orig/drivers/mtd/maps/Kconfig\n+++ linux-2.6.23/drivers/mtd/maps/Kconfig\n@@ -614,5 +614,11 @@ config MTD_PLATRAM\n\nThis selection automatically selects the map_ram driver.\n\n+config MTD_VIP19XX_NOR\n+       tristate "Map driver for Motorola VIP19xx board"\n+       depends on SH_MOTOROLA_VIP19XX && MTD_CFI_INTELEXT\n+       help\n+         Map driver for the NOR flash on Motorola VIP19xx boards.\n+\nendmenu\n'),
 ('linux-2.6.23.orig/drivers/mtd/maps/Makefile',
  'linux-2.6.23/drivers/mtd/maps/Makefile',
  'Index: linux-2.6.23/drivers/mtd/maps/Makefile\n===================================================================\n--- linux-2.6.23.orig/drivers/mtd/maps/Makefile\n+++ linux-2.6.23/drivers/mtd/maps/Makefile\n@@ -71,3 +71,4 @@ obj-$(CONFIG_MTD_PLATRAM)\t+= plat-ram.o\nobj-$(CONFIG_MTD_OMAP_NOR)\t+= omap_nor.o\nobj-$(CONFIG_MTD_MTX1)\t\t+= mtx-1_flash.o\nobj-$(CONFIG_MTD_TQM834x)\t+= tqm834x.o\n+obj-$(CONFIG_MTD_VIP19XX_NOR)\t+= vip19xx_nor.o'),
 ('dev/null',
  'linux-2.6.23/drivers/mtd/maps/vip19xx_nor.c',
  'Index: linux-2.6.23/drivers/mtd/maps/vip19xx_nor.c\n===================================================================\n--- dev/null\n+++ linux-2.6.23/drivers/mtd/maps/vip19xx_nor.c\n@@ -0,0 +1,174 @@\n+/*\n+ *---------------------------------------------------------------------------\n+ *\n+ * vip19xx_nor.c\n+ *\n+ * Copyright (c) 2008-2011 Motorola, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ * notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ * notice, this list of conditions and the following disclaimer in the\n+ * documentation and/or other materials provided with the distribution.\n+ * 3. The name of the author may not be used to endorse or promote products\n+ * derived from this software without specific prior written permission.\n+ *\n+ * Alternatively, this software may be distributed under the terms of the\n+ * GNU General Public License ("GPL") version 2 as published by the Free\n+ * Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS\'\' AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ *---------------------------------------------------------------------------\n+ */\n+\n+#include <asm/vip19xx.h>\n+#include <linux/module.h>\n+#include <linux/kernel.h>\n+#include <linux/init.h>\n+#include <linux/ioport.h>\n+#include <linux/mtd/cfi.h>\n+#include <linux/mtd/mtd.h>\n+#include <linux/mtd/map.h>\n+#include <linux/mtd/physmap.h>\n+#include <linux/mtd/partitions.h>\n+#include <linux/notifier.h>\n+\n+int register_machine_restart_notifier(struct notifier_block * nb);\n+\n+static struct map_info onboard_map = {\n+\t.name = "Onboard_Flash",\n+\t.phys = VIP19XX_NOR_FLASH_BASE,\n+\t.size = VIP19XX_NOR_FLASH_SIZE,\n+\t.bankwidth = VIP19XX_NOR_FLASH_BANKWIDTH\n+};\n+\n+static struct mtd_partition onboard_partitions[2] = {\n+\t{\n+\t .name = "FFS area",\n+\t .size = VIP19XX_NOR_FLASH_FFS_SIZE,\n+\t .offset = (VIP19XX_NOR_FLASH_SIZE - VIP19XX_NOR_FLASH_FFS_SIZE),\n+\t},\n+\t{\n+\t .name = "Raw area",\n+\t .size = (VIP19XX_NOR_FLASH_SIZE - VIP19XX_NOR_FLASH_FFS_SIZE),\n+\t .offset = 0x00000000,\n+\t}\n+};\n+\n+static void set_emi_cs(int active)\n+{\n+\tvoid __iomem *emi = ioremap_nocache(VIP19XX_EMI_CONFIG_BASE, VIP19XX_EMI_CONFIG_SIZE);\n+\tif (active) {\n+\t\tVIP19XX_EMI_ENABLE_CS(emi, VIP19XX_NOR_FLASH_EMI_BANK);\n+\t}\n+\telse {\n+\t\tVIP19XX_EMI_DISABLE_CS(emi, VIP19XX_NOR_FLASH_EMI_BANK);\n+\t}\n+\tiounmap(emi);\n+}\n+\n+/*\n+ * Set chip to FL_READY state before restarting\n+ * Similar to do_read_onechip (cfi_cmdset_0001.c), minus mutexing.\n+ * Enables and disables the Chip select pulse on the EMI.\n+ */\n+static int machine_restart_notifier(struct notifier_block *nb,\n+                                    unsigned long val,\n+                                    void *v)\n+{\n+\tstruct map_info *map = &onboard_map;\n+\tstruct cfi_private *cfi = map->fldrv_priv;\n+\n+\tset_emi_cs(1);\n+\tmap_write(map, CMD(0xff), 0);\n+\tset_emi_cs(0);\n+\treturn NOTIFY_OK;\n+}\n+\n+static struct notifier_block restart_notifier_block = {\n+\tmachine_restart_notifier, NULL, 0\n+};\n+\n+static struct mtd_info *onboard_mtd;\n+static struct mtd_partition *parsed_parts;\n+static const char *probes[] = { "cmdlinepart", NULL };\n+\n+static int __init init(void)\n+{\n+\tint nr_parts = 0;\n+\n+\t/* Enable writing to Flash */\n+\tset_emi_cs(1);\n+\n+\tregister_machine_restart_notifier(&restart_notifier_block);\n+\n+\tprintk(KERN_NOTICE "VIP19xx onboard flash device\\n");\n+\n+\tonboard_map.virt =\n+\t\t(unsigned long *)ioremap_nocache(onboard_map.phys, onboard_map.size);\n+\tif (onboard_map.virt == 0) {\n+\t\tprintk(KERN_ERR "Failed to ioremap onboard flash\\n");\n+\t}\n+\telse {\n+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS\n+\t\tsimple_map_init(&onboard_map);\n+#endif\n+\t\tonboard_mtd = do_map_probe("cfi_probe", &onboard_map);\n+\t\tif (onboard_mtd != NULL) {\n+\t\t\tonboard_mtd->owner = THIS_MODULE;\n+#ifdef CONFIG_MTD_CMDLINE_PARTS\n+\t\t\t\tnr_parts = parse_mtd_partitions(onboard_mtd, probes,\n+\t\t\t\t\t\t\t\t&parsed_parts, 0);\n+#endif\n+\t\t\t\tif (nr_parts <= 0) {\n+\t\t\t\t\tadd_mtd_partitions(onboard_mtd,\n+\t\t\t\t\t\t\t   onboard_partitions,\n+\t\t\t\t\t\t\t   ARRAY_SIZE\n+\t\t\t\t\t\t\t   (onboard_partitions));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tadd_mtd_partitions(onboard_mtd, parsed_parts,\n+\t\t\t\t\t\t\t   nr_parts);\n+\t\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tiounmap((void *)onboard_map.virt);\n+\t\t}\n+\t}\n+\n+\treturn 0;\n+}\n+\n+static void __exit cleanup(void)\n+{\n+\tif (onboard_mtd != NULL) {\n+\t\tdel_mtd_partitions(onboard_mtd);\n+\t\tmap_destroy(onboard_mtd);\n+\t}\n+\n+\tif (onboard_map.virt != 0) {\n+\t\tiounmap((void *)onboard_map.virt);\n+\t\tonboard_map.virt = 0;\n+\t}\n+}\n+\n+module_init(init);\n+module_exit(cleanup);\n+\n+MODULE_LICENSE("GPL");\n+MODULE_AUTHOR("Erik Johansson <erik.johansson@motorola.com>");\n+MODULE_DESCRIPTION("MTD map and partitions for Motorola VIP19xx boards");')]