[('linux-2.6.23/drivers/net/phy/phy.c.orig',
  'linux-2.6.23/drivers/net/phy/phy.c',
  '--- linux-2.6.23/drivers/net/phy/phy.c.orig\n+++ linux-2.6.23/drivers/net/phy/phy.c\n@@ -475,7 +475,7 @@\ninit_timer(&phydev->phy_timer);\nphydev->phy_timer.function = &phy_timer;\nphydev->phy_timer.data = (unsigned long) phydev;\n-\tmod_timer(&phydev->phy_timer, jiffies + HZ);\n+\tmod_timer(&phydev->phy_timer, jiffies + PHY_INIT_TIME);\n}\n\n/**\n@@ -781,6 +781,7 @@\nstruct phy_device *phydev = (struct phy_device *)data;\nint needs_aneg = 0;\nint err = 0;\n+\tint use_fast_timer = 0;\n\nspin_lock(&phydev->lock);\n\n@@ -792,14 +793,17 @@\ncase PHY_STARTING:\ncase PHY_READY:\ncase PHY_PENDING:\n+\t\t\tuse_fast_timer = 1;\nbreak;\ncase PHY_UP:\n+\t\t\tuse_fast_timer = 1;\nneeds_aneg = 1;\n\nphydev->link_timeout = PHY_AN_TIMEOUT;\n\nbreak;\ncase PHY_AN:\n+\t\t\tuse_fast_timer = 1;\nerr = phy_read_status(phydev);\n\nif (err < 0)\n@@ -854,15 +858,18 @@\n}\nbreak;\ncase PHY_NOLINK:\n-\t\t\terr = phy_read_status(phydev);\n-\n-\t\t\tif (err)\n-\t\t\t\tbreak;\n-\n-\t\t\tif (phydev->link) {\n-\t\t\t\tphydev->state = PHY_RUNNING;\n-\t\t\t\tnetif_carrier_on(phydev->attached_dev);\n-\t\t\t\tphydev->adjust_link(phydev->attached_dev);\n+\t\t\t/* Only read link status if we are polling */\n+\t\t\tif (PHY_POLL == phydev->irq) {\n+\t\t\t\terr = phy_read_status(phydev);\n+\n+\t\t\t\tif (err)\n+\t\t\t\t\tbreak;\n+\n+\t\t\t\tif (phydev->link) {\n+\t\t\t\t\tphydev->state = PHY_RUNNING;\n+\t\t\t\t\tnetif_carrier_on(phydev->attached_dev);\n+\t\t\t\t\tphydev->adjust_link(phydev->attached_dev);\n+\t\t\t\t}\n}\nbreak;\ncase PHY_FORCING:\n@@ -956,6 +963,11 @@\nif (err < 0)\nphy_error(phydev);\n\n-\tmod_timer(&phydev->phy_timer, jiffies + PHY_STATE_TIME * HZ);\n+\t/* Configure a fast timer during initial states to speed up\n+\t   the initialization. */\n+\tif (use_fast_timer)\n+\t\tmod_timer(&phydev->phy_timer, jiffies + PHY_INIT_TIME);\n+\telse\n+\t\tmod_timer(&phydev->phy_timer, jiffies + PHY_STATE_TIME);\n}\n')]