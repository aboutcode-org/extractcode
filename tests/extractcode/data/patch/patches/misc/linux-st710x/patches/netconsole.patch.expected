[('linux-2.6.23/drivers/net/netconsole.c.orig',
  'linux-2.6.23/drivers/net/netconsole.c',
  "--- linux-2.6.23/drivers/net/netconsole.c.orig\n+++ linux-2.6.23/drivers/net/netconsole.c\n@@ -62,24 +62,83 @@\n.remote_mac = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff},\n};\nstatic int configured = 0;\n+static char *message_buffer = NULL;\n+static unsigned int message_buffer_length = 0;\n+static unsigned int packet_number = 1;\n\n-#define MAX_PRINT_CHUNK 1000\n+static void queue_message(const char *message, unsigned int length)\n+{\n+\tif (!message_buffer) {\n+\t\t/* Allocate space for the new buffer but also first add\n+\t\t   add a header containing packet number and time stamp\n+\t\t   (secs, usecs). Also reserve space for a NULL termination\n+\t\t   at the end. */\n+\t\tunsigned int tmp = 0;\n+\t\tunsigned long long current_time =\n+\t\t\t(unsigned long long)jiffies * (1000000000 / HZ);\n+\t\tunsigned long usecs = do_div(current_time, 1000000000) / 1000;\n+\t\tmessage_buffer_length = 3 * sizeof(unsigned int) + length + 1;\n+\t\tmessage_buffer = kmalloc(message_buffer_length, GFP_KERNEL);\n+\t\ttmp = htonl(packet_number++);\n+\t\tmemcpy(message_buffer, &tmp, sizeof(unsigned int));\n+\t\ttmp = htonl(current_time);\n+\t\tmemcpy(message_buffer + sizeof(unsigned int), &tmp,\n+\t\t       sizeof(unsigned int));\n+\t\ttmp = htonl(usecs);\n+\t\tmemcpy(message_buffer + 2 * sizeof(unsigned int), &tmp,\n+\t\t       sizeof(unsigned int));\n+\t\tmemcpy(message_buffer + 3 * sizeof(unsigned int), message,\n+\t\t       length);\n+\t}\n+\telse {\n+\t\t/* Reallocate space for the new message, remove the\n+\t\t   NULL termination at the end of the old message queue,\n+\t\t   copy the new message to the end and include a new\n+\t\t   NULL termination again. */\n+\t\tchar *tmp = kmalloc(message_buffer_length - 1, GFP_KERNEL);\n+\t\tmemcpy(tmp, message_buffer, message_buffer_length - 1);\n+\t\tkfree(message_buffer);\n+\t\tmessage_buffer = kmalloc(message_buffer_length + length,\n+\t\t\t\t\t GFP_KERNEL);\n+\t\tmemcpy(message_buffer, tmp, message_buffer_length - 1);\n+\t\tmemcpy(message_buffer + message_buffer_length - 1, message,\n+\t\t       length);\n+\t\tmessage_buffer_length += length;\n+\t\tkfree(tmp);\n+\t}\n+\n+\t/* Note: The NULL termination is included inside the message_buffer */\n+\tmessage_buffer[message_buffer_length - 1] = '\\0';\n+}\n\nstatic void write_msg(struct console *con, const char *msg, unsigned int len)\n{\n-\tint frag, left;\nunsigned long flags;\n+\tunsigned int pos = 0;\n+\tunsigned int new_starting_point = 0;\n\nif (!np.dev)\nreturn;\n\nlocal_irq_save(flags);\n\n-\tfor(left = len; left; ) {\n-\t\tfrag = min(left, MAX_PRINT_CHUNK);\n-\t\tnetpoll_send_udp(&np, msg, frag);\n-\t\tmsg += frag;\n-\t\tleft -= frag;\n+\t/* Queue messages up to the next new line */\n+\twhile (pos < len) {\n+\t\tif (msg[pos] == '\\n') {\n+\t\t\tqueue_message(msg + new_starting_point,\n+\t\t\t\t      pos - new_starting_point);\n+\t\t\tnetpoll_send_udp(&np, message_buffer,\n+\t\t\t\t\t message_buffer_length);\n+\t\t\tkfree(message_buffer);\n+\t\t\tmessage_buffer = NULL;\n+\t\t\tmessage_buffer_length = 0;\n+\t\t\tnew_starting_point = pos + 1;\n+\t\t}\n+\t\t++pos;\n+\t}\n+\tif (new_starting_point < len) {\n+\t\tqueue_message(msg + new_starting_point,\n+\t\t\t      len - new_starting_point);\n}\n\nlocal_irq_restore(flags);"),
 ('linux-2.6.23/net/core/netpoll.c.orig',
  'linux-2.6.23/net/core/netpoll.c',
  "--- linux-2.6.23/net/core/netpoll.c.orig\n+++ linux-2.6.23/net/core/netpoll.c\n@@ -710,7 +710,7 @@\nnp->name);\nbreak;\n}\n-\t\t\tcond_resched();\n+\t\t\tschedule();\n}\n\n/* If carrier appears to come up instantly, we don't")]