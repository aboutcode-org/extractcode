[('linux-2.6.23.orig/drivers/Kconfig',
  'linux-2.6.23/drivers/Kconfig',
  'Index: linux-2.6.23/drivers/Kconfig\n===================================================================\n--- linux-2.6.23.orig/drivers/Kconfig\n+++ linux-2.6.23/drivers/Kconfig\n@@ -94,4 +94,6 @@ source "drivers/lguest/Kconfig"\n\nsource "drivers/stm/Kconfig"\n\n+source "drivers/kreatv/Kconfig"\n+\nendmenu'),
 ('linux-2.6.23.orig/drivers/Makefile',
  'linux-2.6.23/drivers/Makefile',
  'Index: linux-2.6.23/drivers/Makefile\n===================================================================\n--- linux-2.6.23.orig/drivers/Makefile\n+++ linux-2.6.23/drivers/Makefile\n@@ -89,3 +89,4 @@ obj-$(CONFIG_HID)\t\t+= hid/\nobj-$(CONFIG_PPC_PS3)\t\t+= ps3/\nobj-$(CONFIG_OF)\t\t+= of/\nobj-$(CONFIG_STM_DRIVERS)\t+= stm/\n+obj-$(CONFIG_KREATV_SUPPORT)    += kreatv/'),
 ('dev/null',
  'linux-2.6.23/drivers/kreatv/Kconfig',
  'Index: linux-2.6.23/drivers/kreatv/Kconfig\n===================================================================\n--- dev/null\n+++ linux-2.6.23/drivers/kreatv/Kconfig\n@@ -0,0 +1,23 @@\n+#\n+# KreaTV Specific Options\n+#\n+\n+menu "KreaTV Specific Options"\n+\n+config KREATV_SUPPORT\n+\tbool "KreaTV Support"\n+\tdefault n\n+\thelp\n+\t  Enables KreaTV specific drivers.\n+\n+config KREATV_FIRMWARE_FAN_CTRL\n+\tbool "KreaTV Firmware fan control"\n+\tdepends on KREATV_SUPPORT\n+\tdefault y\n+\thelp\n+\t  Support for controling the fan on KreaTV boards from within\n+\t  the KreaTV Firmware.\n+\n+\t  Should always be enabled when building the KreaTV Firmware.\n+\n+endmenu'),
 ('dev/null',
  'linux-2.6.23/drivers/kreatv/Makefile',
  'Index: linux-2.6.23/drivers/kreatv/Makefile\n===================================================================\n--- dev/null\n+++ linux-2.6.23/drivers/kreatv/Makefile\n@@ -0,0 +1,5 @@\n+#\n+# Makefile for KreaTV specific options.\n+#\n+\n+obj-$(CONFIG_KREATV_FIRMWARE_FAN_CTRL) += fan_ctrl.o'),
 ('dev/null',
  'linux-2.6.23/drivers/kreatv/fan_ctrl.c',
  'Index: linux-2.6.23/drivers/kreatv/fan_ctrl.c\n===================================================================\n--- dev/null\n+++ linux-2.6.23/drivers/kreatv/fan_ctrl.c\n@@ -0,0 +1,174 @@\n+/*\n+ *---------------------------------------------------------------------------\n+ *\n+ * fan_ctrl.c\n+ *\n+ * Copyright (c) 2008-2011 Motorola, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ * notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ * notice, this list of conditions and the following disclaimer in the\n+ * documentation and/or other materials provided with the distribution.\n+ * 3. The name of the author may not be used to endorse or promote products\n+ * derived from this software without specific prior written permission.\n+ *\n+ * Alternatively, this software may be distributed under the terms of the\n+ * GNU General Public License ("GPL") version 2 as published by the Free\n+ * Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS\'\' AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ *---------------------------------------------------------------------------\n+ */\n+\n+#include <linux/version.h>\n+#include <linux/module.h>\n+#include <linux/stm/pio.h>\n+#include <linux/timer.h>\n+#include <asm/io.h>\n+\n+MODULE_AUTHOR ("Motorola IPVS");\n+MODULE_DESCRIPTION ("Firmware driver for the system fan in VIP19xx");\n+MODULE_LICENSE ("GPL");\n+\n+#define INITIAL_FAN_SPEED 30  // Initial fan speed in percent\n+#define MAXIMUM_FAN_SPEED 80  // Fan speed in percent after the timeout\n+#define TIMEOUT_VALUE     10  // Timeout in minutes\n+\n+static void timeout_handler(unsigned long ignored);\n+static int timeout_timer_active = 0;\n+static struct timer_list timeout_timer =\n+  TIMER_INITIALIZER(timeout_handler, 0, 0);\n+\n+// PWM-timer registry summary\n+#define PWMTimerBaseAddress (0xB8010000)\n+#define PWM0_VAL            (PWMTimerBaseAddress+0x00)  // PWM 0 reload value\n+#define PWM_CTRL            (PWMTimerBaseAddress+0x50)  // PWM control\n+\n+// Values for PWM_CTRL\n+#define PWM_CTRL_PWM_EN         (1<<0x9)           // Enabled PWM-module\n+#define PWM_CTRL_PWM_CLOCK_MASK (0xffff87f0)\n+\n+// PWM pin assignment\n+static struct stpio_pin *stpio_pwm_out0 = NULL;         // PIO4[6]\n+\n+\n+/* PWM_CTRL\n+ *\n+ * bits    value\n+ * ------  -----------------\n+ *   0-3    PWM_CLK_VAL (LO)\n+ *   4-8    CPT_CLK_VAL\n+ *     9    PWM_EN\n+ *    10    CPT_EN\n+ * 14-11    PWM_CLK_VAL (HI)\n+ * 15-31    reserved\n+ */\n+\n+inline static void pwm_ctrl_pwm_en(u8 set)\n+{\n+  int reg = ctrl_inl(PWM_CTRL);\n+  if (set) {\n+    ctrl_outl(reg | PWM_CTRL_PWM_EN, PWM_CTRL);\n+  }\n+  else {\n+    ctrl_outl(reg & ~PWM_CTRL_PWM_EN, PWM_CTRL);\n+  }\n+};\n+\n+inline static void pwm_ctrl_set_clock(int value)\n+{\n+  int reg = ctrl_inl(PWM_CTRL) & PWM_CTRL_PWM_CLOCK_MASK;\n+  reg |= (value & 0x0f0) << 7;\n+  reg |= value & 0x0f;\n+  ctrl_outl(reg, PWM_CTRL);\n+}\n+\n+/* PWMx_VAL\n+ *\n+ *   Bits     Description\n+ * ---------  -----------------------------------------------------------------\n+ *   0-7      PWMx_OUT will be high for this value plus one clock cycle\n+ *   8-31     reserved\n+ */\n+\n+static void set_pwm0_val(int value)\n+{\n+  uint8_t temp;\n+  if (value >= 100) {\n+    stpio_configure_pin(stpio_pwm_out0, STPIO_OUT);\n+    stpio_set_pin(stpio_pwm_out0, 1);\n+    ctrl_outl(255, PWM0_VAL);\n+    pwm_ctrl_pwm_en(1);\n+  }\n+  else {\n+    if (value > 0) {\n+      stpio_configure_pin(stpio_pwm_out0, STPIO_ALT_OUT);\n+      pwm_ctrl_pwm_en(1);\n+    }\n+    else {\n+      stpio_configure_pin(stpio_pwm_out0, STPIO_OUT);\n+      stpio_set_pin(stpio_pwm_out0, 0);\n+      pwm_ctrl_pwm_en(0);\n+    }\n+    temp = (value<<8)/100;\n+    if ( ((temp*100)>>8) < value)\n+      temp++;\n+    ctrl_outl(temp, PWM0_VAL);\n+  }\n+}\n+\n+static void timeout_handler(unsigned long ignored)\n+{\n+  printk("fan_ctrl: Timeout - Increasing fan speed\\n");\n+  set_pwm0_val(MAXIMUM_FAN_SPEED);\n+  timeout_timer_active = 0;\n+}\n+\n+static int __init fan_ctrl_init(void)\n+{\n+  printk("fan_ctrl: Activating fan monitoring\\n");\n+\n+  stpio_pwm_out0 = stpio_request_set_pin(4, 6, "PWM_OUT0", STPIO_OUT, 0);\n+  if (stpio_pwm_out0 == NULL) {\n+    printk(KERN_ERR "fan_ctrl: error setting up stpio4[6] for output.\\n");\n+    return -EIO;\n+  }\n+  pwm_ctrl_set_clock(0);\n+  set_pwm0_val(INITIAL_FAN_SPEED);\n+\n+  mod_timer(&timeout_timer, jiffies + TIMEOUT_VALUE*60*HZ);\n+  timeout_timer_active = 1;\n+\n+  return 0;\n+}\n+\n+module_init(fan_ctrl_init);\n+\n+static void __exit fan_ctrl_exit(void)\n+{\n+  if (stpio_pwm_out0 != NULL) {\n+    set_pwm0_val(0);\n+    stpio_free_pin(stpio_pwm_out0);\n+  }\n+\n+  if (timeout_timer_active) {\n+    del_timer(&timeout_timer);\n+  }\n+}\n+\n+module_exit(fan_ctrl_exit);'),
 ('linux-2.6.23.orig/include/asm-sh/io.h',
  'linux-2.6.23/include/asm-sh/io.h',
  'Index: linux-2.6.23/include/asm-sh/io.h\n===================================================================\n--- linux-2.6.23.orig/include/asm-sh/io.h\n+++ linux-2.6.23/include/asm-sh/io.h\n@@ -249,7 +249,7 @@ static inline unsigned short ctrl_inw(un\n\nstatic inline unsigned int ctrl_inl(unsigned long addr)\n{\n-\tCTRL_ADDR_CHECK(addr);\n+\t//CTRL_ADDR_CHECK(addr);\nreturn *(volatile unsigned long*)addr;\n}\n\n@@ -267,7 +267,7 @@ static inline void ctrl_outw(unsigned sh\n\nstatic inline void ctrl_outl(unsigned int b, unsigned long addr)\n{\n-\tCTRL_ADDR_CHECK(addr);\n+\t//CTRL_ADDR_CHECK(addr);\n*(volatile unsigned long*)addr = b;\n}\n')]