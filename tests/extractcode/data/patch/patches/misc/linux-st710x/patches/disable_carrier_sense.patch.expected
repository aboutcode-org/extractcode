[('drivers/net/stmmac/common.h',
  'drivers/net/stmmac/common.h',
  'From deeb9b091f2561c8839b54d1ddca9615587d4d45 Mon Sep 17 00:00:00 2001\nFrom: root <root@ubuntu.localdomain>\nDate: Sun, 26 Apr 2009 12:01:21 +0200\nSubject: [PATCH] stmmac: disable CRS during the transmission if fail on loss carrier errors.\n\nDisable carrier sense during the transmission if fail on loss carrier errors.\nSee Bugzilla [Bug 6127].\n\nSigned-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>\n---\ndrivers/net/stmmac/common.h      |    3 ++-\ndrivers/net/stmmac/gmac.c        |   15 ++++++++++++++-\ndrivers/net/stmmac/mac100.c      |    3 ++-\ndrivers/net/stmmac/stmmac_main.c |    4 ++--\n4 files changed, 20 insertions(+), 5 deletions(-)\n\ndiff --git a/drivers/net/stmmac/common.h b/drivers/net/stmmac/common.h\nindex 5525861..f422af7 100644\n--- drivers/net/stmmac/common.h\n+++ drivers/net/stmmac/common.h\n@@ -235,7 +235,8 @@ struct device_ops {\nint (*get_rx_frame_len) (struct dma_desc *p);\n/* Return the transmit status looking at the TDES1 */\nint (*tx_status) (void *data, struct stmmac_extra_stats *x,\n-\t\t\t  struct dma_desc *p, unsigned long ioaddr);\n+\t\t\t  struct dma_desc *p, unsigned long ioaddr,\n+\t\t\t  unsigned int duplex);\n/* Return the reception status looking at the RDES1 */\nint (*rx_status) (void *data, struct stmmac_extra_stats *x,\nstruct dma_desc *p);'),
 ('drivers/net/stmmac/gmac.c',
  'drivers/net/stmmac/gmac.c',
  'diff --git a/drivers/net/stmmac/gmac.c b/drivers/net/stmmac/gmac.c\nindex ad7d933..7baa470 100644\n--- drivers/net/stmmac/gmac.c\n+++ drivers/net/stmmac/gmac.c\n@@ -162,8 +162,20 @@ static void gmac_dump_dma_regs(unsigned long ioaddr)\nreturn;\n}\n\n+/* Disable carrier sense during the transmission if fail on loss carrier errors.\n+ * this shouldn\'t happen; any way, it can help us on Half Duplex. */\n+static void gmac_disable_crs(unsigned long ioaddr, unsigned int duplex)\n+{\n+\tif (!duplex){\n+\t\tu32 value = readl(ioaddr + GMAC_CONTROL);\n+\t\tvalue |= GMAC_CONTROL_DCRS;\n+\t\twritel(value, ioaddr + GMAC_CONTROL);\n+\t}\n+}\n+\nstatic int gmac_get_tx_frame_status(void *data, struct stmmac_extra_stats *x,\n-\t\t\t\t    struct dma_desc *p, unsigned long ioaddr)\n+\t\t\t\t    struct dma_desc *p, unsigned long ioaddr,\n+\t\t\t\t    unsigned int duplex)\n{\nint ret = 0;\nstruct net_device_stats *stats = (struct net_device_stats *)data;\n@@ -185,6 +197,7 @@ static int gmac_get_tx_frame_status(void *data, struct stmmac_extra_stats *x,\nDBG(KERN_ERR "\\tloss_carrier error\\n");\nx->tx_losscarrier++;\nstats->tx_carrier_errors++;\n+\t\t\tgmac_disable_crs(ioaddr, duplex);\n}\nif (unlikely(p->des01.etx.no_carrier)) {\nDBG(KERN_ERR "\\tno_carrier error\\n");\n@@ -203,6 +205,7 @@\nDBG(KERN_ERR "\\tno_carrier error\\n");\nx->tx_carrier++;\nstats->tx_carrier_errors++;\n+\t\t\tgmac_disable_crs(ioaddr, duplex);\n}\nif (unlikely(p->des01.etx.late_collision)) {\nDBG(KERN_ERR "\\tlate_collision error\\n");'),
 ('drivers/net/stmmac/mac100.c',
  'drivers/net/stmmac/mac100.c',
  'diff --git a/drivers/net/stmmac/mac100.c b/drivers/net/stmmac/mac100.c\nindex 8032508..a55713b 100644\n--- drivers/net/stmmac/mac100.c\n+++ drivers/net/stmmac/mac100.c\n@@ -173,7 +173,8 @@ static void mac100_dma_diagnostic_fr(void *data, struct stmmac_extra_stats *x,\n}\n\nstatic int mac100_get_tx_frame_status(void *data, struct stmmac_extra_stats *x,\n-\t\t\t\t      struct dma_desc *p, unsigned long ioaddr)\n+\t\t\t\t      struct dma_desc *p, unsigned long ioaddr,\n+\t\t\t\t      unsigned int duplex)\n{\nint ret = 0;\nstruct net_device_stats *stats = (struct net_device_stats *)data;'),
 ('drivers/net/stmmac/stmmac_main.c',
  'drivers/net/stmmac/stmmac_main.c',
  'diff --git a/drivers/net/stmmac/stmmac_main.c b/drivers/net/stmmac/stmmac_main.c\nindex 2b3f917..fa2cb09 100644\n--- drivers/net/stmmac/stmmac_main.c\n+++ drivers/net/stmmac/stmmac_main.c\n@@ -857,6 +857,7 @@\nstatic void stmmac_tx(struct net_device *dev)\n{\nstruct stmmac_priv *priv = netdev_priv(dev);\n+\tstruct phy_device *phydev = priv->phydev;\nunsigned int txsize = priv->dma_tx_size;\nunsigned long ioaddr = dev->base_addr;\nunsigned int entry = priv->dirty_tx % txsize;\n@@ -865,8 +865,8 @@ static void stmmac_tx(struct net_device *dev)\nif (likely(last)) {\nint tx_error =\npriv->mac_type->ops->tx_status(&dev->stats,\n-\t\t\t\t\t\t\t   &priv->xstats,\n-\t\t\t\t\t\t\t   p, ioaddr);\n+\t\t\t\t\t   &priv->xstats, p, ioaddr,\n+\t\t\t\t\t   phydev->duplex);\nif (likely(tx_error == 0)) {\ndev->stats.tx_packets++;\npriv->xstats.tx_pkt_n++;')]