[
  [
    "linux-2.6.23-orig/mm/page_alloc.c", 
    "linux-2.6.23/mm/page_alloc.c", 
    [
      "--- linux-2.6.23-orig/mm/page_alloc.c", 
      "+++ linux-2.6.23/mm/page_alloc.c", 
      "@@ -1520,7 +1520,7 @@", 
      "static inline void show_node(struct zone *zone)", 
      "{", 
      "if (NUMA_BUILD)", 
      "-\t\tprintk(\"Node %d \", zone_to_nid(zone));", 
      "+\t\tprintk(KERN_DEBUG \"Node %d \", zone_to_nid(zone));", 
      "}", 
      "", 
      "void si_meminfo(struct sysinfo *val)", 
      "@@ -1572,14 +1572,14 @@", 
      "continue;", 
      "", 
      "show_node(zone);", 
      "-\t\tprintk(\"%s per-cpu:\\n\", zone->name);", 
      "+\t\tprintk(KERN_DEBUG \"%s per-cpu:\\n\", zone->name);", 
      "", 
      "for_each_online_cpu(cpu) {", 
      "struct per_cpu_pageset *pageset;", 
      "", 
      "pageset = zone_pcp(zone, cpu);", 
      "", 
      "-\t\t\tprintk(\"CPU %4d: Hot: hi:%5d, btch:%4d usd:%4d   \"", 
      "+\t\t\tprintk(KERN_DEBUG \"CPU %4d: Hot: hi:%5d, btch:%4d usd:%4d   \"", 
      "\"Cold: hi:%5d, btch:%4d usd:%4d\\n\",", 
      "cpu, pageset->pcp[0].high,", 
      "pageset->pcp[0].batch, pageset->pcp[0].count,", 
      "@@ -1588,8 +1588,8 @@", 
      "}", 
      "}", 
      "", 
      "-\tprintk(\"Active:%lu inactive:%lu dirty:%lu writeback:%lu unstable:%lu\\n\"", 
      "-\t\t\" free:%lu slab:%lu mapped:%lu pagetables:%lu bounce:%lu\\n\",", 
      "+\tprintk(KERN_DEBUG \"Active:%lu inactive:%lu dirty:%lu writeback:%lu unstable:%lu\\n\"", 
      "+               \" free:%lu slab:%lu mapped:%lu pagetables:%lu bounce:%lu\\n\",", 
      "global_page_state(NR_ACTIVE),", 
      "global_page_state(NR_INACTIVE),", 
      "global_page_state(NR_FILE_DIRTY),", 
      "@@ -1609,32 +1609,32 @@", 
      "continue;", 
      "", 
      "show_node(zone);", 
      "-\t\tprintk(\"%s\"", 
      "-\t\t\t\" free:%lukB\"", 
      "-\t\t\t\" min:%lukB\"", 
      "-\t\t\t\" low:%lukB\"", 
      "-\t\t\t\" high:%lukB\"", 
      "-\t\t\t\" active:%lukB\"", 
      "-\t\t\t\" inactive:%lukB\"", 
      "-\t\t\t\" present:%lukB\"", 
      "-\t\t\t\" pages_scanned:%lu\"", 
      "-\t\t\t\" all_unreclaimable? %s\"", 
      "-\t\t\t\"\\n\",", 
      "-\t\t\tzone->name,", 
      "-\t\t\tK(zone_page_state(zone, NR_FREE_PAGES)),", 
      "-\t\t\tK(zone->pages_min),", 
      "-\t\t\tK(zone->pages_low),", 
      "-\t\t\tK(zone->pages_high),", 
      "-\t\t\tK(zone_page_state(zone, NR_ACTIVE)),", 
      "-\t\t\tK(zone_page_state(zone, NR_INACTIVE)),", 
      "-\t\t\tK(zone->present_pages),", 
      "-\t\t\tzone->pages_scanned,", 
      "-\t\t\t(zone->all_unreclaimable ? \"yes\" : \"no\")", 
      "-\t\t\t);", 
      "-\t\tprintk(\"lowmem_reserve[]:\");", 
      "+\t\tprintk(KERN_DEBUG \"%s\"", 
      "+                       \" free:%lukB\"", 
      "+                       \" min:%lukB\"", 
      "+                       \" low:%lukB\"", 
      "+                       \" high:%lukB\"", 
      "+                       \" active:%lukB\"", 
      "+                       \" inactive:%lukB\"", 
      "+                       \" present:%lukB\"", 
      "+                       \" pages_scanned:%lu\"", 
      "+                       \" all_unreclaimable? %s\"", 
      "+                       \"\\n\",", 
      "+                       zone->name,", 
      "+                       K(zone_page_state(zone, NR_FREE_PAGES)),", 
      "+                       K(zone->pages_min),", 
      "+                       K(zone->pages_low),", 
      "+                       K(zone->pages_high),", 
      "+                       K(zone_page_state(zone, NR_ACTIVE)),", 
      "+                       K(zone_page_state(zone, NR_INACTIVE)),", 
      "+                       K(zone->present_pages),", 
      "+                       zone->pages_scanned,", 
      "+                       (zone->all_unreclaimable ? \"yes\" : \"no\")", 
      "+                       );", 
      "+\t\tprintk(KERN_DEBUG \"lowmem_reserve[]:\");", 
      "for (i = 0; i < MAX_NR_ZONES; i++)", 
      "-\t\t\tprintk(\" %lu\", zone->lowmem_reserve[i]);", 
      "-\t\tprintk(\"\\n\");", 
      "+\t\t\tprintk(KERN_DEBUG \" %lu\", zone->lowmem_reserve[i]);", 
      "+\t\tprintk(\"\\n\");", 
      "}", 
      "", 
      "for_each_zone(zone) {", 
      "@@ -1644,7 +1644,7 @@", 
      "continue;", 
      "", 
      "show_node(zone);", 
      "-\t\tprintk(\"%s: \", zone->name);", 
      "+\t\tprintk(KERN_DEBUG \"%s: \", zone->name);", 
      "", 
      "spin_lock_irqsave(&zone->lock, flags);", 
      "for (order = 0; order < MAX_ORDER; order++) {", 
      "@@ -1653,8 +1653,8 @@", 
      "}", 
      "spin_unlock_irqrestore(&zone->lock, flags);", 
      "for (order = 0; order < MAX_ORDER; order++)", 
      "-\t\t\tprintk(\"%lu*%lukB \", nr[order], K(1UL) << order);", 
      "-\t\tprintk(\"= %lukB\\n\", K(total));", 
      "+\t\t\tprintk(KERN_DEBUG \"%lu*%lukB \", nr[order], K(1UL) << order);", 
      "+\t\tprintk(KERN_DEBUG \"= %lukB\\n\", K(total));", 
      "}", 
      "", 
      "show_swap_cache_info();", 
      "@@ -2132,12 +2132,12 @@", 
      "/* cpuset refresh routine should be here */", 
      "}", 
      "vm_total_pages = nr_free_pagecache_pages();", 
      "-\tprintk(\"Built %i zonelists in %s order.  Total pages: %ld\\n\",", 
      "-\t\t\tnum_online_nodes(),", 
      "-\t\t\tzonelist_order_name[current_zonelist_order],", 
      "-\t\t\tvm_total_pages);", 
      "+\tprintk(KERN_DEBUG \"Built %i zonelists in %s order.  Total pages: %ld\\n\",", 
      "+               num_online_nodes(),", 
      "+               zonelist_order_name[current_zonelist_order],", 
      "+               vm_total_pages);", 
      "#ifdef CONFIG_NUMA", 
      "-\tprintk(\"Policy zone: %s\\n\", zone_names[policy_zone]);", 
      "+\tprintk(KERN_DEBUG \"Policy zone: %s\\n\", zone_names[policy_zone]);", 
      "#endif", 
      "}", 
      "", 
      "@@ -3466,27 +3466,27 @@", 
      "find_zone_movable_pfns_for_nodes(zone_movable_pfn);", 
      "", 
      "/* Print out the zone ranges */", 
      "-\tprintk(\"Zone PFN ranges:\\n\");", 
      "+\tprintk(KERN_DEBUG \"Zone PFN ranges:\\n\");", 
      "for (i = 0; i < MAX_NR_ZONES; i++) {", 
      "if (i == ZONE_MOVABLE)", 
      "continue;", 
      "-\t\tprintk(\"  %-8s %8lu -> %8lu\\n\",", 
      "-\t\t\t\tzone_names[i],", 
      "-\t\t\t\tarch_zone_lowest_possible_pfn[i],", 
      "-\t\t\t\tarch_zone_highest_possible_pfn[i]);", 
      "+\t\tprintk(KERN_DEBUG \"  %-8s %8lu -> %8lu\\n\",", 
      "+                       zone_names[i],", 
      "+                       arch_zone_lowest_possible_pfn[i],", 
      "+                       arch_zone_highest_possible_pfn[i]);", 
      "}", 
      "", 
      "/* Print out the PFNs ZONE_MOVABLE begins at in each node */", 
      "-\tprintk(\"Movable zone start PFN for each node\\n\");", 
      "+\tprintk(KERN_DEBUG \"Movable zone start PFN for each node\\n\");", 
      "for (i = 0; i < MAX_NUMNODES; i++) {", 
      "if (zone_movable_pfn[i])", 
      "-\t\t\tprintk(\"  Node %d: %lu\\n\", i, zone_movable_pfn[i]);", 
      "+\t\t\tprintk(KERN_DEBUG \"  Node %d: %lu\\n\", i, zone_movable_pfn[i]);", 
      "}", 
      "", 
      "/* Print out the early_node_map[] */", 
      "-\tprintk(\"early_node_map[%d] active PFN ranges\\n\", nr_nodemap_entries);", 
      "+\tprintk(KERN_DEBUG \"early_node_map[%d] active PFN ranges\\n\", nr_nodemap_entries);", 
      "for (i = 0; i < nr_nodemap_entries; i++)", 
      "-\t\tprintk(\"  %3d: %8lu -> %8lu\\n\", early_node_map[i].nid,", 
      "+\t\tprintk(KERN_DEBUG \"  %3d: %8lu -> %8lu\\n\", early_node_map[i].nid,", 
      "early_node_map[i].start_pfn,", 
      "early_node_map[i].end_pfn);", 
      ""
    ]
  ]
]