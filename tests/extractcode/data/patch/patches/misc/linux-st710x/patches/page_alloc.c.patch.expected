[('linux-2.6.23-orig/mm/page_alloc.c',
  'linux-2.6.23/mm/page_alloc.c',
  '--- linux-2.6.23-orig/mm/page_alloc.c\n+++ linux-2.6.23/mm/page_alloc.c\n@@ -1520,7 +1520,7 @@\nstatic inline void show_node(struct zone *zone)\n{\nif (NUMA_BUILD)\n-\t\tprintk("Node %d ", zone_to_nid(zone));\n+\t\tprintk(KERN_DEBUG "Node %d ", zone_to_nid(zone));\n}\n\nvoid si_meminfo(struct sysinfo *val)\n@@ -1572,14 +1572,14 @@\ncontinue;\n\nshow_node(zone);\n-\t\tprintk("%s per-cpu:\\n", zone->name);\n+\t\tprintk(KERN_DEBUG "%s per-cpu:\\n", zone->name);\n\nfor_each_online_cpu(cpu) {\nstruct per_cpu_pageset *pageset;\n\npageset = zone_pcp(zone, cpu);\n\n-\t\t\tprintk("CPU %4d: Hot: hi:%5d, btch:%4d usd:%4d   "\n+\t\t\tprintk(KERN_DEBUG "CPU %4d: Hot: hi:%5d, btch:%4d usd:%4d   "\n"Cold: hi:%5d, btch:%4d usd:%4d\\n",\ncpu, pageset->pcp[0].high,\npageset->pcp[0].batch, pageset->pcp[0].count,\n@@ -1588,8 +1588,8 @@\n}\n}\n\n-\tprintk("Active:%lu inactive:%lu dirty:%lu writeback:%lu unstable:%lu\\n"\n-\t\t" free:%lu slab:%lu mapped:%lu pagetables:%lu bounce:%lu\\n",\n+\tprintk(KERN_DEBUG "Active:%lu inactive:%lu dirty:%lu writeback:%lu unstable:%lu\\n"\n+               " free:%lu slab:%lu mapped:%lu pagetables:%lu bounce:%lu\\n",\nglobal_page_state(NR_ACTIVE),\nglobal_page_state(NR_INACTIVE),\nglobal_page_state(NR_FILE_DIRTY),\n@@ -1609,32 +1609,32 @@\ncontinue;\n\nshow_node(zone);\n-\t\tprintk("%s"\n-\t\t\t" free:%lukB"\n-\t\t\t" min:%lukB"\n-\t\t\t" low:%lukB"\n-\t\t\t" high:%lukB"\n-\t\t\t" active:%lukB"\n-\t\t\t" inactive:%lukB"\n-\t\t\t" present:%lukB"\n-\t\t\t" pages_scanned:%lu"\n-\t\t\t" all_unreclaimable? %s"\n-\t\t\t"\\n",\n-\t\t\tzone->name,\n-\t\t\tK(zone_page_state(zone, NR_FREE_PAGES)),\n-\t\t\tK(zone->pages_min),\n-\t\t\tK(zone->pages_low),\n-\t\t\tK(zone->pages_high),\n-\t\t\tK(zone_page_state(zone, NR_ACTIVE)),\n-\t\t\tK(zone_page_state(zone, NR_INACTIVE)),\n-\t\t\tK(zone->present_pages),\n-\t\t\tzone->pages_scanned,\n-\t\t\t(zone->all_unreclaimable ? "yes" : "no")\n-\t\t\t);\n-\t\tprintk("lowmem_reserve[]:");\n+\t\tprintk(KERN_DEBUG "%s"\n+                       " free:%lukB"\n+                       " min:%lukB"\n+                       " low:%lukB"\n+                       " high:%lukB"\n+                       " active:%lukB"\n+                       " inactive:%lukB"\n+                       " present:%lukB"\n+                       " pages_scanned:%lu"\n+                       " all_unreclaimable? %s"\n+                       "\\n",\n+                       zone->name,\n+                       K(zone_page_state(zone, NR_FREE_PAGES)),\n+                       K(zone->pages_min),\n+                       K(zone->pages_low),\n+                       K(zone->pages_high),\n+                       K(zone_page_state(zone, NR_ACTIVE)),\n+                       K(zone_page_state(zone, NR_INACTIVE)),\n+                       K(zone->present_pages),\n+                       zone->pages_scanned,\n+                       (zone->all_unreclaimable ? "yes" : "no")\n+                       );\n+\t\tprintk(KERN_DEBUG "lowmem_reserve[]:");\nfor (i = 0; i < MAX_NR_ZONES; i++)\n-\t\t\tprintk(" %lu", zone->lowmem_reserve[i]);\n-\t\tprintk("\\n");\n+\t\t\tprintk(KERN_DEBUG " %lu", zone->lowmem_reserve[i]);\n+\t\tprintk("\\n");\n}\n\nfor_each_zone(zone) {\n@@ -1644,7 +1644,7 @@\ncontinue;\n\nshow_node(zone);\n-\t\tprintk("%s: ", zone->name);\n+\t\tprintk(KERN_DEBUG "%s: ", zone->name);\n\nspin_lock_irqsave(&zone->lock, flags);\nfor (order = 0; order < MAX_ORDER; order++) {\n@@ -1653,8 +1653,8 @@\n}\nspin_unlock_irqrestore(&zone->lock, flags);\nfor (order = 0; order < MAX_ORDER; order++)\n-\t\t\tprintk("%lu*%lukB ", nr[order], K(1UL) << order);\n-\t\tprintk("= %lukB\\n", K(total));\n+\t\t\tprintk(KERN_DEBUG "%lu*%lukB ", nr[order], K(1UL) << order);\n+\t\tprintk(KERN_DEBUG "= %lukB\\n", K(total));\n}\n\nshow_swap_cache_info();\n@@ -2132,12 +2132,12 @@\n/* cpuset refresh routine should be here */\n}\nvm_total_pages = nr_free_pagecache_pages();\n-\tprintk("Built %i zonelists in %s order.  Total pages: %ld\\n",\n-\t\t\tnum_online_nodes(),\n-\t\t\tzonelist_order_name[current_zonelist_order],\n-\t\t\tvm_total_pages);\n+\tprintk(KERN_DEBUG "Built %i zonelists in %s order.  Total pages: %ld\\n",\n+               num_online_nodes(),\n+               zonelist_order_name[current_zonelist_order],\n+               vm_total_pages);\n#ifdef CONFIG_NUMA\n-\tprintk("Policy zone: %s\\n", zone_names[policy_zone]);\n+\tprintk(KERN_DEBUG "Policy zone: %s\\n", zone_names[policy_zone]);\n#endif\n}\n\n@@ -3466,27 +3466,27 @@\nfind_zone_movable_pfns_for_nodes(zone_movable_pfn);\n\n/* Print out the zone ranges */\n-\tprintk("Zone PFN ranges:\\n");\n+\tprintk(KERN_DEBUG "Zone PFN ranges:\\n");\nfor (i = 0; i < MAX_NR_ZONES; i++) {\nif (i == ZONE_MOVABLE)\ncontinue;\n-\t\tprintk("  %-8s %8lu -> %8lu\\n",\n-\t\t\t\tzone_names[i],\n-\t\t\t\tarch_zone_lowest_possible_pfn[i],\n-\t\t\t\tarch_zone_highest_possible_pfn[i]);\n+\t\tprintk(KERN_DEBUG "  %-8s %8lu -> %8lu\\n",\n+                       zone_names[i],\n+                       arch_zone_lowest_possible_pfn[i],\n+                       arch_zone_highest_possible_pfn[i]);\n}\n\n/* Print out the PFNs ZONE_MOVABLE begins at in each node */\n-\tprintk("Movable zone start PFN for each node\\n");\n+\tprintk(KERN_DEBUG "Movable zone start PFN for each node\\n");\nfor (i = 0; i < MAX_NUMNODES; i++) {\nif (zone_movable_pfn[i])\n-\t\t\tprintk("  Node %d: %lu\\n", i, zone_movable_pfn[i]);\n+\t\t\tprintk(KERN_DEBUG "  Node %d: %lu\\n", i, zone_movable_pfn[i]);\n}\n\n/* Print out the early_node_map[] */\n-\tprintk("early_node_map[%d] active PFN ranges\\n", nr_nodemap_entries);\n+\tprintk(KERN_DEBUG "early_node_map[%d] active PFN ranges\\n", nr_nodemap_entries);\nfor (i = 0; i < nr_nodemap_entries; i++)\n-\t\tprintk("  %3d: %8lu -> %8lu\\n", early_node_map[i].nid,\n+\t\tprintk(KERN_DEBUG "  %3d: %8lu -> %8lu\\n", early_node_map[i].nid,\nearly_node_map[i].start_pfn,\nearly_node_map[i].end_pfn);\n')]