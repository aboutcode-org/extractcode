[('src.orig/3rdParty/webkit/work/WebCore/loader/loader.cpp',
  'src/3rdParty/webkit/work/WebCore/loader/loader.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/loader/loader.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/loader/loader.cpp\n+++ src/3rdParty/webkit/work/WebCore/loader/loader.cpp\n@@ -78,6 +78,11 @@ void Loader::servePendingRequests()\nrequest.setURL(KURL(origUrl.latin1().data()));\nrequest.addHTTPHeaderField("transfermode.dlna.org", "Interactive");\n}\n+        if (origUrl.contains("?com.motorola.gfxmem=true"))\n+        {\n+            origUrl.truncate(origUrl.find("?com.motorola.gfxmem=true"));\n+            request.setURL(KURL(origUrl.latin1().data()));\n+        }\n\nif (!req->cachedResource()->accept().isEmpty())\nrequest.setHTTPAccept(req->cachedResource()->accept());'),
 ('src.orig/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp',
  'src/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp\n+++ src/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp\n@@ -2111,6 +2111,11 @@ void FrameLoader::load(DocumentLoader* n\nr.setURL(KURL(origUrl.latin1().data()));\nr.addHTTPHeaderField("transfermode.dlna.org", "Interactive");\n}\n+    if (origUrl.contains("?com.motorola.gfxmem=true"))\n+    {\n+        origUrl.truncate(origUrl.find("?com.motorola.gfxmem=true"));\n+        r.setURL(KURL(origUrl.latin1().data()));\n+    }\n\nif (shouldTreatURLAsSameAsCurrent(newDocumentLoader->originalRequest().url())) {\nr.setCachePolicy(ReloadIgnoringCacheData);'),
 ('src.orig/3rdParty/webkit/work/WebCore/loader/CachedImage.cpp',
  'src/3rdParty/webkit/work/WebCore/loader/CachedImage.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/loader/CachedImage.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/loader/CachedImage.cpp\n+++ src/3rdParty/webkit/work/WebCore/loader/CachedImage.cpp\n@@ -185,7 +185,8 @@ inline void CachedImage::createImage()\nreturn;\n}\n#endif\n-    m_image = new BitmapImage(this);\n+    m_image = new BitmapImage(this,\n+\t\t\t      url().contains("?com.motorola.gfxmem=true"));\n}\n\nvoid CachedImage::data(PassRefPtr<SharedBuffer> data, bool allDataReceived)'),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.cpp',
  'src/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.cpp',
  "Index: src/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.cpp\n+++ src/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.cpp\n@@ -41,7 +41,7 @@ namespace WebCore {\n// one frame at a time.\nconst unsigned cLargeAnimationCutoff = 5242880;\n\n-BitmapImage::BitmapImage(ImageObserver* observer)\n+BitmapImage::BitmapImage(ImageObserver* observer, bool accelerated)\n: Image(observer)\n, m_currentFrame(0)\n, m_frames(0)\n@@ -55,6 +55,7 @@ BitmapImage::BitmapImage(ImageObserver*\n, m_haveSize(false)\n, m_sizeAvailable(false)\n, m_decodedSize(0)\n+    , m_accelerated(accelerated)\n{\ninitPlatformData();\n}\n@@ -93,7 +94,7 @@ void BitmapImage::destroyDecodedData(boo\n// Reset the image source, since Image I/O has an underlying cache that it uses\n// while animating that it seems to never clear.\nm_source.clear();\n-            m_source.setData(m_data.get(), m_allDataReceived);\n+            m_source.setData(m_data.get(), m_allDataReceived, m_accelerated);\n}\n}\n}\n@@ -144,7 +145,7 @@ bool BitmapImage::dataChanged(bool allDa\n\n// Feed all the data we've seen so far to the image decoder.\nm_allDataReceived = allDataReceived;\n-    m_source.setData(m_data.get(), allDataReceived);\n+    m_source.setData(m_data.get(), allDataReceived, m_accelerated);\n\n// Image properties will not be available until the first frame of the file\n// reaches kCGImageStatusIncomplete."),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.h',
  'src/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.h',
  'Index: src/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.h\n+++ src/3rdParty/webkit/work/WebCore/platform/graphics/BitmapImage.h\n@@ -93,10 +93,11 @@ public:\n#if PLATFORM(QT)\nBitmapImage(const QPixmap &pixmap, ImageObserver* = 0);\n#endif\n-    BitmapImage(ImageObserver* = 0);\n+    BitmapImage(ImageObserver* = 0, bool accelerated = false);\n~BitmapImage();\n\nvirtual IntSize size() const;\n+    virtual bool isAccelerated() const { return m_accelerated; }\n\nvirtual bool dataChanged(bool allDataReceived);\n\n@@ -195,6 +196,7 @@ private:\nmutable bool m_haveSize; // Whether or not our |m_size| member variable has the final overall image size yet.\nbool m_sizeAvailable; // Whether or not we can obtain the size of the first image frame yet from ImageIO.\nunsigned m_decodedSize; // The current size of all decoded frames.\n+    bool m_accelerated; // Whether or not the image should be placed in graphics memory.\n\n#if PLATFORM(QT)\nQPixmap *m_pixmap;'),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/graphics/ImageSource.h',
  'src/3rdParty/webkit/work/WebCore/platform/graphics/ImageSource.h',
  'Index: src/3rdParty/webkit/work/WebCore/platform/graphics/ImageSource.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/graphics/ImageSource.h\n+++ src/3rdParty/webkit/work/WebCore/platform/graphics/ImageSource.h\n@@ -86,7 +86,7 @@ public:\n\nbool initialized() const;\n\n-    void setData(SharedBuffer* data, bool allDataReceived);\n+    void setData(SharedBuffer* data, bool allDataReceived, bool accelerated);\n\nbool isSizeAvailable();\nIntSize size() const;\n@@ -103,6 +103,7 @@ public:\n\nprivate:\nNativeImageSourcePtr m_decoder;\n+    bool m_accelerated;\n};\n\n}'),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/graphics/Image.h',
  'src/3rdParty/webkit/work/WebCore/platform/graphics/Image.h',
  'Index: src/3rdParty/webkit/work/WebCore/platform/graphics/Image.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/graphics/Image.h\n+++ src/3rdParty/webkit/work/WebCore/platform/graphics/Image.h\n@@ -79,6 +79,7 @@ public:\nstatic bool supportsType(const String&);\n\nbool isNull() const;\n+    virtual bool isAccelerated() const { return false; }\n\n// These are only used for SVGImage right now\nvirtual void setContainerSize(const IntSize&) { }')]