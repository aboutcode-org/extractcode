[('src.orig/3rdParty/webkit/work/WebCore/plugins/npfunctions.h',
  'src/3rdParty/webkit/work/WebCore/plugins/npfunctions.h',
  'Index: src/3rdParty/webkit/work/WebCore/plugins/npfunctions.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/plugins/npfunctions.h\n+++ src/3rdParty/webkit/work/WebCore/plugins/npfunctions.h\n@@ -61,6 +61,7 @@ typedef void* (*NPN_GetJavaEnvProcPtr)(v\ntypedef void* (*NPN_GetJavaPeerProcPtr)(NPP instance);\ntypedef void (*NPN_PushPopupsEnabledStateProcPtr)(NPP instance, NPBool enabled);\ntypedef void (*NPN_PopPopupsEnabledStateProcPtr)(NPP instance);\n+typedef void (*NPN_PluginThreadAsyncCallProcPtr)(NPP npp, void (*func)(void *), void *userData);\n\ntypedef void (*NPN_ReleaseVariantValueProcPtr) (NPVariant *variant);\n\n@@ -151,6 +152,7 @@ typedef struct _NPNetscapeFuncs {\nNPN_PushPopupsEnabledStateProcPtr pushpopupsenabledstate;\nNPN_PopPopupsEnabledStateProcPtr poppopupsenabledstate;\nNPN_EnumerateProcPtr enumerate;\n+    NPN_PluginThreadAsyncCallProcPtr pluginthreadasynccall;\n} NPNetscapeFuncs;\n\ntypedef struct _NPPluginFuncs {'),
 ('src.orig/Browser/WebCore/platform/ekioh/PluginEkioh.cpp',
  'src/Browser/WebCore/platform/ekioh/PluginEkioh.cpp',
  'Index: src/Browser/WebCore/platform/ekioh/PluginEkioh.cpp\n===================================================================\n--- src.orig/Browser/WebCore/platform/ekioh/PluginEkioh.cpp\n+++ src/Browser/WebCore/platform/ekioh/PluginEkioh.cpp\n@@ -41,6 +41,11 @@\n#include "EKString.h"\n#include "EKUrl.h"\n\n+#include "EKCallback.h"\n+#include "EKCallbackListener.h"\n+\n+#include <deque>\n+\nnamespace WebCore {\n\nstatic NPNetscapeFuncs s_browserFuncs;\n@@ -67,6 +72,7 @@ static void invalidateRegion(NPP instanc\nstatic void forceRedraw(NPP instance);\nstatic void pushPopupsEnabledState(NPP npp, NPBool enabled);\nstatic void popPopupsEnabledState(NPP npp);\n+static void pluginThreadAsyncCall(NPP npp, void (*func)(void *), void *userData);\n\n#ifdef _WIN32_WCE\n#define strdup _strdup\n@@ -433,6 +439,7 @@ PluginView::getBrowserFuncs()\n#endif\nbrowserFuncs.pushpopupsenabledstate = &pushPopupsEnabledState;\nbrowserFuncs.poppopupsenabledstate = &popPopupsEnabledState;\n+        browserFuncs.pluginthreadasynccall = &pluginThreadAsyncCall;\n\n\n// NP runtime\n@@ -656,4 +663,78 @@ popPopupsEnabledState(NPP npp)\n{\n}\n\n+namespace {\n+    class PluginThreadAsyncCallListener : public ekioh::EKCallbackListener\n+    {\n+        class Functor\n+        {\n+            void (*m_func)(void*);\n+            void* m_userData;\n+\n+        public:\n+            Functor(void (*func)(void*), void* userData)\n+              : m_func(func),\n+                m_userData(userData)\n+            { }\n+\n+            void call() const\n+            {\n+                m_func(m_userData);\n+            }\n+        };\n+\n+        typedef std::deque<Functor> FunctorQueue;\n+\n+        pthread_mutex_t m_mutex;\n+        FunctorQueue m_callQueue;\n+        FunctorQueue m_tmpCallQueue;\n+\n+    public:\n+        PluginThreadAsyncCallListener()\n+        {\n+            pthread_mutex_init(&m_mutex, NULL);\n+        }\n+\n+        ~PluginThreadAsyncCallListener()\n+        {\n+            pthread_mutex_destroy(&m_mutex);\n+        }\n+\n+        void addCall(void (*func)(void*), void* userData)\n+        {\n+            pthread_mutex_lock(&m_mutex);\n+            m_callQueue.push_back(Functor(func, userData));\n+            pthread_mutex_unlock(&m_mutex);\n+        }\n+\n+        virtual void callback(const ekioh::EKCallback& callback)\n+        {\n+            pthread_mutex_lock(&m_mutex);\n+            m_tmpCallQueue.assign(m_callQueue.begin(), m_callQueue.end());\n+            m_callQueue.clear();\n+            pthread_mutex_unlock(&m_mutex);\n+\n+            for (FunctorQueue::const_iterator it = m_tmpCallQueue.begin();\n+                 it != m_tmpCallQueue.end();\n+                 ++it)\n+            {\n+                it->call();\n+            }\n+        }\n+    };\n+\n+    PluginThreadAsyncCallListener s_pluginThreadAsyncCallListener;\n+\n+    ekioh::EKCallback\n+        s_pluginThreadAsyncCallCallback(s_pluginThreadAsyncCallListener);\n+}\n+\n+void pluginThreadAsyncCall(NPP npp,\n+                           void (*func)(void*),\n+                           void* userData)\n+{\n+    s_pluginThreadAsyncCallListener.addCall(func, userData);\n+    s_pluginThreadAsyncCallCallback.requestCallback();\n+}\n+\n}')]