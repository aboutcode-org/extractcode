[('src.orig/Browser/WebCore/platform/network/ekioh/ResourceHandleManager525.cpp',
  'src/Browser/WebCore/platform/network/ekioh/ResourceHandleManager525.cpp',
  'Index: src/Browser/WebCore/platform/network/ekioh/ResourceHandleManager525.cpp\n===================================================================\n--- src.orig/Browser/WebCore/platform/network/ekioh/ResourceHandleManager525.cpp\n+++ src/Browser/WebCore/platform/network/ekioh/ResourceHandleManager525.cpp\n@@ -64,6 +64,12 @@ namespace WebCore {\n\nResourceHandleManager* ResourceHandleManager::m_instance = 0;\n\n+static const char * CIPHER_LIST  = "TLSv1:SSLv3:-SSLv2:-aNULL:RSA:-EXP:-NULL:+HIGH:-MEDIUM:-LOW:-MD5:-3DES";\n+static const char * CERT_FILE = "/etc/tls/webkit/cert.der";\n+static const char * KEY_FILE = "/etc/tls/webkit/key.der";\n+static const char * CA_BUNDLE_FILE = "/etc/tls/webkit/ca-bundle.pem";\n+static const char * CA_PATH = "/etc/tls/webkit/certs/";\n+\nstatic int updateSocketStatusCallback(\nCURL *easyHandle,\ncurl_socket_t sockfd,\n@@ -545,6 +551,26 @@ void ResourceHandleManager::startJob(Res\n// multi api, so would this have any benefit?\nResourceHandleInternal* d = job->getInternal();\n\n+    int secureMode = atoi(getenv("http_secure_mode"));\n+    if (secureMode > 2) {\n+      // Set to the wrong mode?\n+      fprintf(stderr, "Wrong http_secure_mode? set it to 0\\n");\n+      secureMode = 0;\n+    }\n+\n+    // fprintf(stderr, "Set http secure mode to %d\\n", secureMode);\n+    if (secureMode != 0) {\n+      //http_secure_mode:\n+      //0="http and https" 1="https only" 2="https with mutual authentication only"\n+      DeprecatedString protocol = job->request().url().protocol();\n+      if (protocol.lower() == "http") {\n+        fprintf(stderr, "Http secure mode is set to %d\\n", secureMode);\n+        fprintf(stderr, "normal http access is not allowed\\n");\n+        job->cancel();\n+        return;\n+      }\n+    }\n+\nd->m_handle = curl_easy_init();\ncurl_easy_setopt(d->m_handle, CURLOPT_PRIVATE, job);\ncurl_easy_setopt(d->m_handle, CURLOPT_ERRORBUFFER, m_curlErrorBuffer);\n@@ -567,6 +593,40 @@ void ResourceHandleManager::startJob(Res\nd->m_url = job->request().url().deprecatedString();\ncurl_easy_setopt(d->m_handle, CURLOPT_URL, d->m_url.ascii());\n\n+    // fprintf(stderr, "Enabling curl verbose (may break logging)\\n");\n+    // curl_easy_setopt(d->m_handle, CURLOPT_VERBOSE, 1);\n+\n+    // https setting\n+    curl_easy_setopt(d->m_handle, CURLOPT_SSL_VERIFYHOST, 0);\n+    if (access(CA_BUNDLE_FILE, R_OK) == 0) {\n+      curl_easy_setopt(d->m_handle, CURLOPT_CAINFO, CA_BUNDLE_FILE);\n+    } else {\n+      curl_easy_setopt(d->m_handle, CURLOPT_CAINFO, NULL);\n+    }\n+    if (access(CA_PATH, R_OK) == 0) {\n+      curl_easy_setopt(d->m_handle, CURLOPT_CAPATH, CA_PATH);\n+    } else {\n+      curl_easy_setopt(d->m_handle, CURLOPT_CAPATH, NULL);\n+    }\n+    if (access(CERT_FILE, R_OK) == 0) {\n+      curl_easy_setopt(d->m_handle, CURLOPT_SSLCERT, CERT_FILE);\n+      curl_easy_setopt(d->m_handle, CURLOPT_SSLCERTTYPE, "DER");\n+    }\n+    if (access(KEY_FILE, R_OK) == 0) {\n+      curl_easy_setopt(d->m_handle, CURLOPT_SSLKEY, KEY_FILE);\n+      curl_easy_setopt(d->m_handle, CURLOPT_SSLKEYTYPE, "DER");\n+    }\n+    if (secureMode == 2) {\n+      // https with mutual authentication only\n+      curl_easy_setopt(d->m_handle, CURLOPT_SSL_CIPHER_LIST, CIPHER_LIST);\n+      curl_easy_setopt(d->m_handle, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS);\n+      //curl_easy_setopt(d->m_handle, CURLOPT_SSL_VERIFYPEER, 1L);\n+    }\n+    else if (secureMode == 1) {\n+      // https with server side certificate is ok\n+      //curl_easy_setopt(d->m_handle, CURLOPT_SSL_VERIFYPEER, 0);\n+    }\n+\nsetProxy(job->request(), d->m_handle);\n\nString cs = cookies(0, d->m_url);'),
 ('src.orig/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp',
  'src/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp',
  'Index: src/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp\n===================================================================\n--- src.orig/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp\n+++ src/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp\n@@ -57,6 +57,10 @@\n} while (false)\n\nnamespace {\n+\n+  static const char * CA_BUNDLE_FILE = "/etc/tls/webkit/ca-bundle.pem";\n+  static const char * CA_PATH = "/etc/tls/webkit/certs/";\n+\nstatic bool isPortAllowed(const WebCore::ResourceRequest& request)\n{\n// List from: http://www.mozilla.org/projects/netlib/PortBanning.html\n@@ -350,7 +354,16 @@ void ResourceHandle::loadResourceSynchro\nCURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_FOLLOWLOCATION, 1));\nCURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_HTTPAUTH, CURLAUTH_ANY));\nCURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_SHARE, shareHandle));\n-  CURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_CAINFO, "ca-bundle.crt"));\n+  if (access(CA_BUNDLE_FILE, R_OK) == 0) {\n+    CURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_CAINFO, CA_BUNDLE_FILE));\n+  } else {\n+    CURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_CAINFO, NULL));\n+  }\n+  if (access(CA_PATH, R_OK) == 0) {\n+    CURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_CAPATH, CA_PATH));\n+  } else {\n+    CURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_CAPATH, NULL));\n+  }\n// enable gzip and deflate through Accept-Encoding:\nCURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_ENCODING, ""));\n')]