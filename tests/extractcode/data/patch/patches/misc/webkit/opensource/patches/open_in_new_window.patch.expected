[('src.orig/Browser/WebCoreSupport525/FrameLoaderClientEkioh.cpp',
  'src/Browser/WebCoreSupport525/FrameLoaderClientEkioh.cpp',
  'Index: src/Browser/WebCoreSupport525/FrameLoaderClientEkioh.cpp\n===================================================================\n--- src.orig/Browser/WebCoreSupport525/FrameLoaderClientEkioh.cpp\n+++ src/Browser/WebCoreSupport525/FrameLoaderClientEkioh.cpp\n@@ -175,7 +175,11 @@ void FrameLoaderClientEkioh::dispatchDid\n\nvoid FrameLoaderClientEkioh::dispatchDidFirstLayout() { notImplemented(); }\n\n-Frame* FrameLoaderClientEkioh::dispatchCreatePage() { notImplemented(); return 0; }\n+Frame* FrameLoaderClientEkioh::dispatchCreatePage()\n+{\t//reuse the main frame, since we only have one page\n+\treturn m_webFrame->frame();\n+}\n+\nvoid FrameLoaderClientEkioh::dispatchShow() { notImplemented(); }\n\nvoid FrameLoaderClientEkioh::dispatchDecidePolicyForMIMEType(FramePolicyFunction policyFunction, const String& mimeType, const ResourceRequest&)\n@@ -187,9 +191,22 @@ void FrameLoaderClientEkioh::dispatchDec\n(m_webFrame->frame()->loader()->*policyFunction)(PolicyUse);\n}\n\n-void FrameLoaderClientEkioh::dispatchDecidePolicyForNewWindowAction(FramePolicyFunction policyFunction, const NavigationAction&, const ResourceRequest&, const String&)\n+void FrameLoaderClientEkioh::dispatchDecidePolicyForNewWindowAction(FramePolicyFunction policyFunction, const NavigationAction&, const ResourceRequest& request, const String&)\n{\n-    notImplemented();\n+    DBG("%s %s\\n", __func__, request.url().deprecatedString().ascii());\n+    ASSERT(m_webFrame->frame() && policyFunction);\n+    if (!m_webFrame->frame() || !policyFunction)\n+        return;\n+\n+    PolicyAction policyAction = PolicyUse;\n+    if (m_browserClient != 0) {\n+        String url = request.url().string();\n+        ekioh::EKString ekUrl(url.utf8().data(), url.utf8().length());\n+        if (!m_browserClient->shouldAllowNavigation(ekUrl)) {\n+            policyAction = PolicyIgnore;\n+        }\n+    }\n+    (m_webFrame->frame()->loader()->*policyFunction)(policyAction);\n}\n\nvoid FrameLoaderClientEkioh::dispatchDecidePolicyForNavigationAction(FramePolicyFunction policyFunction, const NavigationAction&, const ResourceRequest& request)')]