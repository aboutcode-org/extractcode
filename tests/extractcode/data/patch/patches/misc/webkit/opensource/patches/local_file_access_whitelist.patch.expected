[('src.orig/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp',
  'src/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp\n+++ src/3rdParty/webkit/work/WebCore/loader/FrameLoader.cpp\n@@ -97,6 +97,11 @@\n#include "SVGViewSpec.h"\n#endif\n\n+#include <string>\n+#include <fstream>\n+#include <sys/stat.h>\n+WebCore::FrameLoader::TLocalFileWhiteList WebCore::FrameLoader::m_localFileWhiteList;\n+WebCore::FrameLoader::TLocalFileWhiteList WebCore::FrameLoader::m_localDirectoryWhiteList;\nusing KJS::UString;\nusing KJS::JSLock;\nusing KJS::JSValue;\n@@ -264,6 +269,7 @@ FrameLoader::FrameLoader(Frame* frame, F\n, m_needToSwitchOutLowBandwidthDisplay(false)\n#endif\n{\n+  populateLocalFileWhiteList();\n}\n\nFrameLoader::~FrameLoader()\n@@ -1406,6 +1412,56 @@ bool FrameLoader::isLocationChange(const\nreturn false;\n}\n\n+void FrameLoader::populateLocalFileWhiteList()\n+{\n+  m_localFileWhiteList.clear();\n+  m_localDirectoryWhiteList.clear();\n+\n+  std::string line;\n+  std::ifstream file("/etc/local_file_access_whitelist", std::ifstream::out);\n+\n+  if (!file.is_open()) {\n+    return;\n+  }\n+\n+  while (std::getline(file, line)) {\n+    struct stat st;\n+    int result = ::stat(line.c_str(), &st);\n+    if (result == 0) {\n+      String l = String("file://") + line.c_str();\n+      if (S_ISREG(st.st_mode)) {\n+        m_localFileWhiteList.push_back(l);\n+      }\n+      else if (S_ISDIR(st.st_mode)) {\n+        if (!l.endsWith("/")) {\n+          l.append(\'/\');\n+        }\n+        m_localDirectoryWhiteList.push_back(l);\n+      }\n+    }\n+  }\n+}\n+\n+bool FrameLoader::allowLocalFile(const String& url)\n+{\n+  for (TLocalFileWhiteList::const_iterator f = m_localFileWhiteList.begin();\n+       f != m_localFileWhiteList.end(); ++f) {\n+    if (url == *f) {\n+      return true;\n+    }\n+  }\n+  for (TLocalFileWhiteList::const_iterator f =\n+         m_localDirectoryWhiteList.begin();\n+       f != m_localDirectoryWhiteList.end(); ++f) {\n+    KURL k(url.deprecatedString());\n+    String u = *f + String(k.lastPathComponent());\n+    if (url == u) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\nvoid FrameLoader::scheduleHistoryNavigation(int steps)\n{\n// navigation will always be allowed in the 0 steps case, which is OK because\n@@ -4659,7 +4715,7 @@ bool FrameLoader::shouldTreatURLAsLocal(\nif (s[0] == \'h\' && s[1] == \'t\' && s[2] == \'t\' && s[3] == \'p\' && s[4] == \':\')\nreturn false;\nif (s[0] == \'f\' && s[1] == \'i\' && s[2] == \'l\' && s[3] == \'e\' && s[4] == \':\')\n-            return true;\n+            return !allowLocalFile(url);\n}\n\nint loc = url.find(\':\');'),
 ('src.orig/3rdParty/webkit/work/WebCore/loader/FrameLoader.h',
  'src/3rdParty/webkit/work/WebCore/loader/FrameLoader.h',
  'Index: src/3rdParty/webkit/work/WebCore/loader/FrameLoader.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/loader/FrameLoader.h\n+++ src/3rdParty/webkit/work/WebCore/loader/FrameLoader.h\n@@ -47,6 +47,8 @@\n#include "CachedResourceClient.h"\n#endif\n\n+#include <vector>\n+\nnamespace KJS {\nclass JSValue;\n}\n@@ -558,6 +560,9 @@ namespace WebCore {\n\nstatic bool isLocationChange(const ScheduledRedirection&);\n\n+        void populateLocalFileWhiteList();\n+        static bool allowLocalFile(const String& url);\n+\nFrame* m_frame;\nFrameLoaderClient* m_client;\n\n@@ -641,6 +646,10 @@ namespace WebCore {\n\nbool m_didPerformFirstNavigation;\n\n+        typedef std::vector<String> TLocalFileWhiteList;\n+        static TLocalFileWhiteList m_localFileWhiteList;\n+        static TLocalFileWhiteList m_localDirectoryWhiteList;\n+\n#ifndef NDEBUG\nbool m_didDispatchDidCommitLoad;\n#endif')]