[('dev/null',
  'src/3rdParty/webkit/patches/moto-timer.patch',
  'Index: src/3rdParty/webkit/patches/moto-timer.patch\n===================================================================\n--- dev/null\n+++ src/3rdParty/webkit/patches/moto-timer.patch\n@@ -0,0 +1,60 @@\n+diff -ur work/WebCore/platform/Timer.cpp work/WebCore/platform/Timer.cpp\n+--- work/WebCore/platform/Timer.cpp\t2009-06-03 11:07:39.000000000 +0200\n++++ work/WebCore/platform/Timer.cpp\t2009-06-03 11:08:14.000000000 +0200\n+@@ -50,6 +50,8 @@\n+ static bool deferringTimers;\n+ static Vector<TimerBase*>* timerHeap;\n+ static HashSet<const TimerBase*>* timersReadyToFire;\n++static double MaxValue = (long long)1 << 32;\n++static double LastFireTime;\n+\n+ // ----------------\n+\n+@@ -317,8 +319,18 @@\n+     checkConsistency();\n+ }\n+\n++inline double TimerBase::getNextFireTime()\n++{\n++    return m_nextFireTime;\n++}\n++\n+ void TimerBase::collectFiringTimers(double fireTime, Vector<TimerBase*>& firingTimers)\n+ {\n++    if (LastFireTime > fireTime) {\n++        for (uint32_t index = 0; index < timerHeap->size(); index++) {\n++            (*timerHeap)[index]->setNextFireTime(((*timerHeap)[index]->getNextFireTime() * 100 - MaxValue) / 100);\n++        }\n++    }\n+     while (!timerHeap->isEmpty() && timerHeap->first()->m_nextFireTime <= fireTime) {\n+         TimerBase* timer = timerHeap->first();\n+         firingTimers.append(timer);\n+@@ -326,6 +338,7 @@\n+         timer->m_nextFireTime = 0;\n+         timer->heapDeleteMin();\n+     }\n++    LastFireTime = fireTime;\n+ }\n+\n+ void TimerBase::fireTimers(double fireTime, const Vector<TimerBase*>& firingTimers)\n+diff -ur work/WebCore/platform/Timer.h work/WebCore/platform/Timer.h\n+--- work/WebCore/platform/Timer.h\t2008-11-26 17:49:55.000000000 +0100\n++++ work/WebCore/platform/Timer.h\t2009-06-03 11:08:14.000000000 +0200\n+@@ -54,6 +54,8 @@\n+     void augmentRepeatInterval(double delta) { setNextFireTime(m_nextFireTime + delta); m_repeatInterval += delta; }\n+\n+     static void fireTimersInNestedEventLoop();\n++    void setNextFireTime(double);\n++    double getNextFireTime();\n+\n+ private:\n+     virtual void fired() = 0;\n+@@ -61,8 +63,6 @@\n+     void checkConsistency() const;\n+     void checkHeapIndex() const;\n+\n+-    void setNextFireTime(double);\n+-\n+     bool inHeap() const { return m_heapIndex != -1; }\n+\n+     void heapDecreaseKey();'),
 ('src.orig/3rdParty/webkit/patches/series',
  'src/3rdParty/webkit/patches/series',
  'Index: src/3rdParty/webkit/patches/series\n===================================================================\n--- src.orig/3rdParty/webkit/patches/series\n+++ src/3rdParty/webkit/patches/series\n@@ -19,6 +19,7 @@ jscore-vector-alignment.patch\nwebcore-arena-alignment.patch\nekioh-png-uclibc.patch\nwebcore-enclosing-int-rect.patch\n+moto-timer.patch\ndebug-fixes.patch\nwebcore-no-scrollbars.patch\nnewlib-uint32-long.patch')]