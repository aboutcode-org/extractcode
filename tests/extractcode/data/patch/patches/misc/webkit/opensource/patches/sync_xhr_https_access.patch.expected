[('src.orig/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp',
  'src/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp',
  'Index: src/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp\n===================================================================\n--- src.orig/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp\n+++ src/Browser/WebCore/platform/network/ekioh/ResourceHandleEkioh.cpp\n@@ -35,6 +35,8 @@\n#include "ResourceHandleClient.h"\n#include "ResourceHandleInternal.h"\n#include "ResourceHandleManager.h"\n+#include "EKConfigDB.h"\n+#include "EKString.h"\n\n#include "NotImplemented.h"\n#include "EKDebug.h"\n@@ -60,6 +62,9 @@ namespace {\n\nstatic const char * CA_BUNDLE_FILE = "/etc/tls/webkit/ca-bundle.pem";\nstatic const char * CA_PATH = "/etc/tls/webkit/certs/";\n+  static const char * CIPHER_LIST  = "TLSv1:SSLv3:-SSLv2:-aNULL:RSA:-EXP:-NULL:+HIGH:-MEDIUM:-LOW:-MD5:-3DES";\n+  static const char * CERT_FILE = "/etc/tls/webkit/cert.der";\n+  static const char * KEY_FILE = "/etc/tls/webkit/key.der";\n\nstatic bool isPortAllowed(const WebCore::ResourceRequest& request)\n{\n@@ -501,6 +506,68 @@ void ResourceHandle::loadResourceSynchro\n} else {\nCURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_CAPATH, NULL));\n}\n+\n+        curl_easy_setopt(curlHandle, CURLOPT_SSL_VERIFYHOST, 0);\n+\n+        int secureMode = 0;\n+        ekioh::EKString value;\n+        if (ekioh::EKConfigDB::instance()->get("browser.http_secure_mode", value)) {\n+            const char* cValue = value.toCString();\n+            secureMode = atoi(cValue);\n+            ekioh::EKString::freeCString(cValue);\n+        }\n+        if (secureMode > 2) {\n+            // Set to the wrong mode?\n+            fprintf(stderr, "Wrong http_secure_mode? set it to 0\\n");\n+            secureMode = 0;\n+        }\n+\n+        HTTPHeaderMap::const_iterator it = request.httpHeaderFields().find("transferMode.dlna.org");\n+        if (secureMode > 0 && it != request.httpHeaderFields().end()) {\n+            fprintf(stderr, "Allowing http access for DLNA image\\n");\n+            secureMode = 0;\n+        }\n+\n+        // fprintf(stderr, "Set http secure mode to %d\\n", secureMode);\n+        if (secureMode != 0) {\n+            //http_secure_mode:\n+            //0="http and https" 1="https only" 2="https with mutual authentication only"\n+            DeprecatedString protocol = request.url().protocol();\n+            if (protocol.lower() == "http") {\n+                fprintf(stderr, "Http secure mode is set to %d\\n", secureMode);\n+                fprintf(stderr, "normal http access is not allowed\\n");\n+                if (cacheEntry) {\n+                  cacheEntry->cancel();\n+                }\n+                return;\n+            }\n+\n+            if(protocol.lower() == "file") {\n+                DBG("Http secure mode is set to %d\\n", secureMode);\n+                DBG("Allowing non-secure access for local filesystem\\n");\n+                secureMode = 0;\n+            }\n+        }\n+\n+        if (access(CERT_FILE, R_OK) == 0) {\n+            curl_easy_setopt(curlHandle, CURLOPT_SSLCERT, CERT_FILE);\n+            curl_easy_setopt(curlHandle, CURLOPT_SSLCERTTYPE, "DER");\n+        }\n+        if (access(KEY_FILE, R_OK) == 0) {\n+            curl_easy_setopt(curlHandle, CURLOPT_SSLKEY, KEY_FILE);\n+            curl_easy_setopt(curlHandle, CURLOPT_SSLKEYTYPE, "DER");\n+        }\n+        if (secureMode == 2) {\n+            // https with mutual authentication only\n+            curl_easy_setopt(curlHandle, CURLOPT_SSL_CIPHER_LIST, CIPHER_LIST);\n+            curl_easy_setopt(curlHandle, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS);\n+            //curl_easy_setopt(curlHandle, CURLOPT_SSL_VERIFYPEER, 1L);\n+        }\n+        else if (secureMode == 1) {\n+            // https with server side certificate is ok\n+            //curl_easy_setopt(curlHandle, CURLOPT_SSL_VERIFYPEER, 0);\n+        }\n+\n// enable gzip and deflate through Accept-Encoding:\nCURL_CALL(curl_easy_setopt(curlHandle, CURLOPT_ENCODING, ""));\n')]