[('smurF/src/3rdParty/webkit/work/WebCore/css/CSSComputedStyleDeclaration.cpp',
  'CSSComputedStyleDeclaration.cpp',
  '--- smurF/src/3rdParty/webkit/work/WebCore/css/CSSComputedStyleDeclaration.cpp\n+++ CSSComputedStyleDeclaration.cpp\n@@ -293,6 +293,23 @@ static IntRect sizingBox(RenderObject* r\nreturn renderer->style()->boxSizing() == CONTENT_BOX ? renderer->contentBox() : renderer->borderBox();\n}\n\n+static PassRefPtr<CSSPrimitiveValue> computedTransform(RenderObject* renderer, const RenderStyle* style)\n+{\n+  if (!renderer) // || style->transform().operations().isEmpty())\n+    return new CSSPrimitiveValue(CSS_VAL_NONE);\n+\n+  IntRect box = sizingBox(renderer);\n+\n+  AffineTransform transform;\n+  //renderer->style()->applyTransform(transform, box.size());\n+  style->applyTransform(transform, box.size(), true);\n+  String string = ("matrix(");\n+  string += String::number(transform.a()) + "," + String::number(transform.b()) + "," + String::number(transform.c()) + ",";\n+  string += String::number(transform.d()) + "," + String::number(transform.e()) + "," + String::number(transform.f()) + ")";\n+\n+  return new CSSPrimitiveValue(string, CSSPrimitiveValue::CSS_STRING);\n+}\n+\nCSSComputedStyleDeclaration::CSSComputedStyleDeclaration(PassRefPtr<Node> n)\n: m_node(n)\n{\n@@ -846,6 +863,8 @@ PassRefPtr<CSSValue> CSSComputedStyleDec\nreturn getBorderRadiusCornerValue(style->borderTopLeftRadius());\ncase CSS_PROP__WEBKIT_BORDER_TOP_RIGHT_RADIUS:\nreturn getBorderRadiusCornerValue(style->borderTopRightRadius());\n+        case CSS_PROP__WEBKIT_TRANSFORM:\n+\t  return computedTransform(renderer, style);\ncase CSS_PROP_BACKGROUND:\ncase CSS_PROP_BORDER:\ncase CSS_PROP_BORDER_BOTTOM:\n@@ -904,7 +923,6 @@ PassRefPtr<CSSValue> CSSComputedStyleDec\ncase CSS_PROP__WEBKIT_MARQUEE_SPEED:\ncase CSS_PROP__WEBKIT_PADDING_START:\ncase CSS_PROP__WEBKIT_TEXT_STROKE:\n-        case CSS_PROP__WEBKIT_TRANSFORM:\ncase CSS_PROP__WEBKIT_TRANSFORM_ORIGIN:\ncase CSS_PROP__WEBKIT_TRANSFORM_ORIGIN_X:\ncase CSS_PROP__WEBKIT_TRANSFORM_ORIGIN_Y:'),
 ('smurF/src/3rdParty/webkit/work/WebCore/css/CSSStyleSelector.cpp',
  'CSSStyleSelector.cpp',
  '--- smurF/src/3rdParty/webkit/work/WebCore/css/CSSStyleSelector.cpp\n+++ CSSStyleSelector.cpp\n@@ -4546,8 +4546,7 @@ void CSSStyleSelector::applyProperty(int\nangleY = rad2deg(angle);\nelse if (secondValue->primitiveType() == CSSPrimitiveValue::CSS_GRAD)\nangleY = grad2deg(angle);\n-                                } else\n-                                    angleY = angleX;\n+                                }\n}\n}\n'),
 ('smurF/src/3rdParty/webkit/work/WebCore/rendering/RenderStyle.h',
  'RenderStyle.h',
  '--- smurF/src/3rdParty/webkit/work/WebCore/rendering/RenderStyle.h\n+++ RenderStyle.h\n@@ -1817,7 +1817,7 @@ public:\nLength transformOriginX() const { return rareNonInheritedData->m_transform->m_x; }\nLength transformOriginY() const { return rareNonInheritedData->m_transform->m_y; }\nbool hasTransform() const { return !rareNonInheritedData->m_transform->m_operations.isEmpty(); }\n-    void applyTransform(AffineTransform&, const IntSize& borderBoxSize) const;\n+    void applyTransform(AffineTransform&, const IntSize& borderBoxSize, bool excludeTransformOrigin = false) const;\n// End CSS3 Getters\n\n// Apple-specific property getter methods'),
 ('smurF/src/3rdParty/webkit/work/WebCore/rendering/RenderStyle.cpp',
  'RenderStyle.cpp',
  '--- smurF/src/3rdParty/webkit/work/WebCore/rendering/RenderStyle.cpp\n+++ RenderStyle.cpp\n@@ -1518,7 +1518,7 @@ void ContentData::clear()\n}\n}\n\n-void RenderStyle::applyTransform(AffineTransform& transform, const IntSize& borderBoxSize) const\n+void RenderStyle::applyTransform(AffineTransform& transform, const IntSize& borderBoxSize, bool excludeTransformOrigin) const\n{\n// transform-origin brackets the transform with translate operations.\n// Optimize for the case where the only transform is a translation, since the transform-origin is irrelevant\n@@ -1526,12 +1526,14 @@ void RenderStyle::applyTransform(AffineT\nbool applyTransformOrigin = false;\nunsigned s = rareNonInheritedData->m_transform->m_operations.size();\nunsigned i;\n+    if (!excludeTransformOrigin) {\nfor (i = 0; i < s; i++) {\nif (!rareNonInheritedData->m_transform->m_operations[i]->isTranslateOperation()) {\napplyTransformOrigin = true;\nbreak;\n}\n}\n+    }\n\nif (applyTransformOrigin)\ntransform.translate(transformOriginX().calcValue(borderBoxSize.width()), transformOriginY().calcValue(borderBoxSize.height()));')]