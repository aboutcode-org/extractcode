[('dev/null',
  'src/3rdParty/webkit/patches/moto-jsvalue-equal.patch',
  'Index: src/3rdParty/webkit/patches/moto-jsvalue-equal.patch\n===================================================================\n--- dev/null\n+++ src/3rdParty/webkit/patches/moto-jsvalue-equal.patch\n@@ -0,0 +1,65 @@\n+diff -urN work.orig/JavaScriptCore/bindings/runtime_object.h work/JavaScriptCore/bindings/runtime_object.h\n+--- work.orig/JavaScriptCore/bindings/runtime_object.h\n++++ work/JavaScriptCore/bindings/runtime_object.h\n+@@ -28,7 +28,7 @@\n+\n+ #include "runtime.h"\n+ #include "object.h"\n+-\n++#include "operations.h"\n+ #include <wtf/Noncopyable.h>\n+\n+ namespace KJS {\n+@@ -50,6 +50,15 @@\n+\n+     virtual void invalidate();\n+     Bindings::Instance *getInternalInstance() const { return instance.get(); }\n++\n++    virtual bool compare(ExecState* exec, JSObject *obj) {\n++      if (obj == NULL) return false;\n++      if (className() == obj->className()) {\n++         RuntimeObjectImp *robj = (RuntimeObjectImp *)obj;\n++         return equal(exec, getInternalInstance()->valueOf(), robj->getInternalInstance()->valueOf());\n++      }\n++      return (this==obj);\n++    }\n+\n+     static JSObject* throwInvalidAccessError(ExecState*);\n+\n+diff -urN work.orig/JavaScriptCore/kjs/object.h work/JavaScriptCore/kjs/object.h\n+--- work.orig/JavaScriptCore/kjs/object.h\n++++ work/JavaScriptCore/kjs/object.h\n+@@ -114,7 +114,7 @@\n+\n+     virtual void mark();\n+     virtual JSType type() const;\n+-\n++    virtual bool compare(ExecState* exec, JSObject *obj) { return this == obj; }\n+     /**\n+      * A pointer to a ClassInfo struct for this class. This provides a basic\n+      * facility for run-time type information, and can be used to check an\n+diff -urN work.orig/JavaScriptCore/kjs/operations.cpp work/JavaScriptCore/kjs/operations.cpp\n+--- work.orig/JavaScriptCore/kjs/operations.cpp\n++++ work/JavaScriptCore/kjs/operations.cpp\n+@@ -95,6 +95,10 @@\n+         return v1->toBoolean(exec) == v2->toBoolean(exec);\n+\n+     // types are Object\n++    JSObject *o1 = v1 ? v1->getObject() : NULL;\n++    JSObject *o2 = v2 ? v2->getObject() : NULL;\n++    if (o1 != NULL && o2 != NULL && v1 != v2)\n++      return o1->compare(exec, o2);\n+     return v1 == v2;\n+ }\n+\n+@@ -118,6 +122,10 @@\n+     else if (t2 == BooleanType)\n+         return v1->toBoolean(exec) == v2->toBoolean(exec);\n+\n++    JSObject *o1 = v1 ? v1->getObject() : NULL;\n++    JSObject *o2 = v2 ? v2->getObject() : NULL;\n++    if (o1 != NULL && o2 != NULL && v1 != v2)\n++      return o1->compare(exec, o2);\n+     if (v1 == v2)\n+         return true;\n+     /* TODO: joined objects */'),
 ('src.orig/3rdParty/webkit/patches/series',
  'src/3rdParty/webkit/patches/series',
  'Index: src/3rdParty/webkit/patches/series\n===================================================================\n--- src.orig/3rdParty/webkit/patches/series\n+++ src/3rdParty/webkit/patches/series\n@@ -19,6 +19,7 @@ jscore-vector-alignment.patch\nwebcore-arena-alignment.patch\nekioh-png-uclibc.patch\nwebcore-enclosing-int-rect.patch\n+moto-jsvalue-equal.patch\nmoto-timer.patch\nmoto-dump.patch\ndebug-fixes.patch')]