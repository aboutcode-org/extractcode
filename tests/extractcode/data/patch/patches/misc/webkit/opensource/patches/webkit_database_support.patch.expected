[('src.orig/3rdParty/webkit/work/JavaScriptCore/wtf/Platform.h',
  'src/3rdParty/webkit/work/JavaScriptCore/wtf/Platform.h',
  'Index: src/3rdParty/webkit/work/JavaScriptCore/wtf/Platform.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/JavaScriptCore/wtf/Platform.h\n+++ src/3rdParty/webkit/work/JavaScriptCore/wtf/Platform.h\n@@ -246,7 +246,6 @@\n\n#if PLATFORM(EKIOH)\n#define ENABLE_ICONDATABASE 0\n-#define ENABLE_DATABASE 0\n#define ENABLE_FTPDIR 0\n#if PLATFORM(WIN_OS)\n// FastMalloc / TC stuff seems to rely on Cygwin on WIN32 builds,\n@@ -259,10 +258,6 @@\n#define ENABLE_ICONDATABASE 1\n#endif\n\n-#if !defined(ENABLE_DATABASE)\n-#define ENABLE_DATABASE 1\n-#endif\n-\n#if !defined(ENABLE_FTPDIR)\n#define ENABLE_FTPDIR 1\n#endif'),
 ('src.orig/3rdParty/webkit/work/JavaScriptCore/wtf/TCSystemAlloc.cpp',
  'src/3rdParty/webkit/work/JavaScriptCore/wtf/TCSystemAlloc.cpp',
  "Index: src/3rdParty/webkit/work/JavaScriptCore/wtf/TCSystemAlloc.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/JavaScriptCore/wtf/TCSystemAlloc.cpp\n+++ src/3rdParty/webkit/work/JavaScriptCore/wtf/TCSystemAlloc.cpp\n@@ -170,7 +170,7 @@ static void* TryMmap(size_t size, size_t\nextra = alignment - pagesize;\n}\nvoid* result = mmap(NULL, size + extra,\n-                      PROT_READ|PROT_WRITE,\n+                      PROT_READ | PROT_WRITE,\nMAP_PRIVATE|MAP_ANONYMOUS,\n-1, 0);\nif (result == reinterpret_cast<void*>(MAP_FAILED)) {\n@@ -302,7 +302,7 @@ static void* TryDevMem(size_t size, size\ndevmem_failure = true;\nreturn NULL;\n}\n-  void *result = mmap(0, size + extra, PROT_WRITE|PROT_READ,\n+  void *result = mmap(0, size + extra, PROT_READ | PROT_WRITE,\nMAP_SHARED, physmem_fd, physmem_base);\nif (result == reinterpret_cast<void*>(MAP_FAILED)) {\ndevmem_failure = true;\n@@ -383,8 +383,6 @@ void* TCMalloc_SystemAlloc(size_t size,\n\nvoid TCMalloc_SystemRelease(void* start, size_t length)\n{\n-  UNUSED_PARAM(start);\n-  UNUSED_PARAM(length);\n#if HAVE(MADV_DONTNEED)\nif (FLAGS_malloc_devmem_start) {\n// It's not safe to use MADV_DONTNEED if we've been mapping\n@@ -421,10 +419,20 @@ void TCMalloc_SystemRelease(void* start,\n#endif\n\n#if HAVE(MMAP)\n-  void *newAddress = mmap(start, length, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, -1, 0);\n-  UNUSED_PARAM(newAddress);\n+  void* newAddress = mmap(start, length, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);\n// If the mmap failed then that's ok, we just won't return the memory to the system.\n-  ASSERT(newAddress == start || newAddress == reinterpret_cast<void*>(MAP_FAILED));\n+  ASSERT_UNUSED(newAddress, newAddress == start || newAddress == reinterpret_cast<void*>(MAP_FAILED));\nreturn;\n#endif\n+\n+#if !HAVE(MADV_DONTNEED) && !HAVE(MMAP)\n+  UNUSED_PARAM(start);\n+  UNUSED_PARAM(length);\n+#endif\n}\n+\n+#if HAVE(VIRTUALALLOC)\n+void TCMalloc_SystemCommit(void*, size_t)\n+{\n+}\n+#endif"),
 ('src.orig/3rdParty/webkit/work/JavaScriptCore/wtf/Assertions.h',
  'src/3rdParty/webkit/work/JavaScriptCore/wtf/Assertions.h',
  "Index: src/3rdParty/webkit/work/JavaScriptCore/wtf/Assertions.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/JavaScriptCore/wtf/Assertions.h\n+++ src/3rdParty/webkit/work/JavaScriptCore/wtf/Assertions.h\n@@ -121,11 +121,22 @@ void WTFLogVerbose(const char* file, int\n/* CRASH -- gets us into the debugger or the crash reporter -- signals are ignored by the crash reporter so we must do better */\n\n#ifndef CRASH\n-#define CRASH() *(int *)(uintptr_t)0xbbadbeef = 0\n+#define CRASH() do { \\\n+    *(int *)(uintptr_t)0xbbadbeef = 0; \\\n+    ((void(*)())0)(); /* More reliable, but doesn't say BBADBEEF */ \\\n+} while(false)\n#endif\n\n/* ASSERT, ASSERT_WITH_MESSAGE, ASSERT_NOT_REACHED */\n\n+#if PLATFORM(WIN_CE)\n+/* FIXME: We include this here only to avoid a conflict with the ASSERT macro. */\n+#include <windows.h>\n+#undef min\n+#undef max\n+#undef ERROR\n+#endif\n+\n#if PLATFORM(WIN_OS)\n/* FIXME: Change to use something other than ASSERT to avoid this conflict with win32. */\n#undef ASSERT\n@@ -136,6 +147,7 @@ void WTFLogVerbose(const char* file, int\n#define ASSERT(assertion) ((void)0)\n#define ASSERT_WITH_MESSAGE(assertion, ...) ((void)0)\n#define ASSERT_NOT_REACHED() ((void)0)\n+#define ASSERT_UNUSED(variable, assertion) ((void)variable)\n\n#else\n\n@@ -154,12 +166,14 @@ while (0)\nCRASH(); \\\n} \\\nwhile (0)\n-#endif // COMPILER(MSVC7)\n+#endif /* COMPILER(MSVC7) */\n#define ASSERT_NOT_REACHED() do { \\\nWTFReportAssertionFailure(__FILE__, __LINE__, WTF_PRETTY_FUNCTION, 0); \\\nCRASH(); \\\n} while (0)\n\n+#define ASSERT_UNUSED(variable, assertion) ASSERT(assertion)\n+\n#endif\n\n/* ASSERT_ARG */"),
 ('src.orig/3rdParty/webkit/work/JavaScriptCore/kjs/AllInOneFile.cpp',
  'src/3rdParty/webkit/work/JavaScriptCore/kjs/AllInOneFile.cpp',
  'Index: src/3rdParty/webkit/work/JavaScriptCore/kjs/AllInOneFile.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/JavaScriptCore/kjs/AllInOneFile.cpp\n+++ src/3rdParty/webkit/work/JavaScriptCore/kjs/AllInOneFile.cpp\n@@ -72,5 +72,5 @@\n#include "value.cpp"\n#include "wtf/FastMalloc.cpp"\n#if !defined(USE_SYSTEM_MALLOC)\n-#include "wtf/TCSystemAlloc.cpp"\n+#include "wtf/TCSystemAlloc.h"\n#endif'),
 ('src.orig/3rdParty/webkit/work/WebCore/bindings/scripts/generate-bindings.pl',
  'src/3rdParty/webkit/work/WebCore/bindings/scripts/generate-bindings.pl',
  'Index: src/3rdParty/webkit/work/WebCore/bindings/scripts/generate-bindings.pl\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/bindings/scripts/generate-bindings.pl\n+++ src/3rdParty/webkit/work/WebCore/bindings/scripts/generate-bindings.pl\n@@ -58,6 +58,7 @@ die(\'Must specify input file.\') unless d\ndie(\'Must specify output directory.\') unless defined($outputDirectory);\ndie(\'Must specify defines\') unless defined($defines);\n\n+$defines .=" ENABLE_DATABASE";\n$defines =~ s/^\\s+|\\s+$//g; # trim whitespace\n\n# Parse the given IDL file.'),
 ('src.orig/3rdParty/webkit/work/WebCore/page/Settings.cpp',
  'src/3rdParty/webkit/work/WebCore/page/Settings.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/page/Settings.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/page/Settings.cpp\n+++ src/3rdParty/webkit/work/WebCore/page/Settings.cpp\n@@ -55,6 +55,8 @@ Settings::Settings(Page* page)\n, m_loadsImagesAutomatically(false)\n, m_privateBrowsingEnabled(false)\n, m_arePluginsEnabled(false)\n+    , m_databasesEnabled(true)\n+    , m_localStorageEnabled(false)\n, m_isJavaScriptEnabled(false)\n, m_javaScriptCanOpenWindowsAutomatically(false)\n, m_shouldPrintBackgrounds(false)\n@@ -188,6 +190,15 @@ void Settings::setPluginsEnabled(bool ar\nm_arePluginsEnabled = arePluginsEnabled;\n}\n\n+void Settings::setDatabasesEnabled(bool databasesEnabled)\n+{\n+    m_databasesEnabled = databasesEnabled;\n+}\n+\n+void Settings::setLocalStorageEnabled(bool localStorageEnabled)\n+{\n+    m_localStorageEnabled = localStorageEnabled;\n+}\nvoid Settings::setPrivateBrowsingEnabled(bool privateBrowsingEnabled)\n{\nm_privateBrowsingEnabled = privateBrowsingEnabled;'),
 ('src.orig/3rdParty/webkit/work/WebCore/page/Settings.h',
  'src/3rdParty/webkit/work/WebCore/page/Settings.h',
  'Index: src/3rdParty/webkit/work/WebCore/page/Settings.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/page/Settings.h\n+++ src/3rdParty/webkit/work/WebCore/page/Settings.h\n@@ -93,6 +93,11 @@ namespace WebCore {\nvoid setPluginsEnabled(bool);\nbool arePluginsEnabled() const { return m_arePluginsEnabled; }\n\n+        void setDatabasesEnabled(bool);\n+        bool databasesEnabled() const { return m_databasesEnabled; }\n+\n+        void setLocalStorageEnabled(bool);\n+        bool localStorageEnabled() const { return m_localStorageEnabled; }\nvoid setPrivateBrowsingEnabled(bool);\nbool privateBrowsingEnabled() const { return m_privateBrowsingEnabled; }\n\n@@ -173,6 +178,8 @@ namespace WebCore {\nbool m_loadsImagesAutomatically : 1;\nbool m_privateBrowsingEnabled : 1;\nbool m_arePluginsEnabled : 1;\n+        bool m_databasesEnabled : 1;\n+        bool m_localStorageEnabled : 1;\nbool m_isJavaScriptEnabled : 1;\nbool m_javaScriptCanOpenWindowsAutomatically : 1;\nbool m_shouldPrintBackgrounds : 1;'),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/cf/FileSystemCF.cpp',
  'src/3rdParty/webkit/work/WebCore/platform/cf/FileSystemCF.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/platform/cf/FileSystemCF.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/cf/FileSystemCF.cpp\n+++ src/3rdParty/webkit/work/WebCore/platform/cf/FileSystemCF.cpp\n@@ -30,12 +30,14 @@\n\n#import "CString.h"\n#import "PlatformString.h"\n-#import <wtf/RetainPtr.h>\n+//#import <wtf/RetainPtr.h>\n\nnamespace WebCore {\n\nCString fileSystemRepresentation(const String& path)\n{\n+    return path.utf8();\n+/*\nRetainPtr<CFStringRef> cfString(AdoptCF, path.createCFString());\n\nif (!cfString)\n@@ -52,6 +54,7 @@ CString fileSystemRepresentation(const S\n}\n\nreturn string;\n+*/\n}\n\n} // namespace WebCore'),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/SecurityOrigin.cpp',
  'src/3rdParty/webkit/work/WebCore/platform/SecurityOrigin.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/platform/SecurityOrigin.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/SecurityOrigin.cpp\n+++ src/3rdParty/webkit/work/WebCore/platform/SecurityOrigin.cpp\n@@ -234,7 +234,7 @@ PassRefPtr<SecurityOrigin> SecurityOrigi\nString SecurityOrigin::stringIdentifier() const\n{\nstatic String separatorString = String(&SeparatorCharacter, 1);\n-    return m_protocol + separatorString + m_host + separatorString + String::number(m_port);\n+    return "dbroot";\n}\n\n} // namespace WebCore'),
 ('src.orig/3rdParty/webkit/work/WebCore/storage/DatabaseThread.h',
  'src/3rdParty/webkit/work/WebCore/storage/DatabaseThread.h',
  'Index: src/3rdParty/webkit/work/WebCore/storage/DatabaseThread.h\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/storage/DatabaseThread.h\n+++ src/3rdParty/webkit/work/WebCore/storage/DatabaseThread.h\n@@ -34,6 +34,7 @@\n#include <wtf/HashSet.h>\n#include <wtf/Deque.h>\n#include <wtf/RefPtr.h>\n+#include "Threading.h"\n\nnamespace WebCore {\n\n@@ -59,6 +60,7 @@ private:\nstatic void* databaseThreadStart(void*);\nvoid* databaseThread();\n\n+    Mutex m_threadCreationMutex;\nThreadIdentifier m_threadID;\nRefPtr<DatabaseThread> m_selfRef;\n'),
 ('src.orig/3rdParty/webkit/work/WebCore/storage/DatabaseTracker.cpp',
  'src/3rdParty/webkit/work/WebCore/storage/DatabaseTracker.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/storage/DatabaseTracker.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/storage/DatabaseTracker.cpp\n+++ src/3rdParty/webkit/work/WebCore/storage/DatabaseTracker.cpp\n@@ -64,6 +64,7 @@ DatabaseTracker::DatabaseTracker()\n#ifndef NDEBUG\n, m_thread(currentThread())\n#endif\n+    , m_databaseDirectoryPath("/flash/databases/webkit/")\n{\n}\n\n@@ -155,7 +156,13 @@ bool DatabaseTracker::canEstablishDataba\nm_proposedDatabase = 0;\n\n// If the database will fit now, allow its creation.\n-    return requirement <= quotaForOrigin(origin);\n+    if(quotaForOrigin(origin) == 0) {\n+      //not set, then treat it unconstrained\n+      return true;\n+    }\n+    else {\n+        return requirement <= quotaForOrigin(origin);\n+    }\n}\n\nbool DatabaseTracker::hasEntryForOrigin(SecurityOrigin* origin)\n@@ -206,7 +213,7 @@ String DatabaseTracker::fullPathForDatab\nreturn String();\n\n// See if we have a path for this database yet\n-    openTrackerDatabase(false);\n+    openTrackerDatabase(createIfNotExists);\nif (!m_database.isOpen())\nreturn String();\nSQLiteStatement statement(m_database, "SELECT path FROM Databases WHERE origin=? AND name=?;");\n@@ -276,7 +283,7 @@ void DatabaseTracker::populateOrigins()\nm_quotaMap.set(new QuotaMap);\nm_quotaManager.set(new OriginQuotaManager);\n\n-    openTrackerDatabase(false);\n+    openTrackerDatabase(true);\nif (!m_database.isOpen())\nreturn;\n'),
 ('src.orig/3rdParty/webkit/work/WebCore/storage/Database.cpp',
  'src/3rdParty/webkit/work/WebCore/storage/Database.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/storage/Database.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/storage/Database.cpp\n+++ src/3rdParty/webkit/work/WebCore/storage/Database.cpp\n@@ -172,6 +172,8 @@ Database::~Database()\n\nbool Database::openAndVerifyVersion(ExceptionCode& e)\n{\n+    if (!m_document->databaseThread())\n+        return false;\nm_databaseAuthorizer = new DatabaseAuthorizer();\n\nRefPtr<DatabaseOpenTask> task = new DatabaseOpenTask(this);\n@@ -272,7 +274,7 @@ bool Database::versionMatchesExpected()\n\nvoid Database::markAsDeletedAndClose()\n{\n-    if (m_deleted)\n+    if (m_deleted || !m_document->databaseThread())\nreturn;\n\nLOG(StorageAPI, "Marking %s (%p) as deleted", stringIdentifier().ascii().data(), this);\n@@ -552,6 +554,8 @@ void Database::deliverPendingCallback(vo\n\nVector<String> Database::tableNames()\n{\n+    if (!m_document->databaseThread())\n+        return Vector<String>();\nRefPtr<DatabaseTableNamesTask> task = new DatabaseTableNamesTask(this);\n\ntask->lockForSynchronousScheduling();'),
 ('src.orig/3rdParty/webkit/work/WebCore/storage/DatabaseThread.cpp',
  'src/3rdParty/webkit/work/WebCore/storage/DatabaseThread.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/storage/DatabaseThread.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/storage/DatabaseThread.cpp\n+++ src/3rdParty/webkit/work/WebCore/storage/DatabaseThread.cpp\n@@ -48,9 +48,11 @@ DatabaseThread::~DatabaseThread()\n\nbool DatabaseThread::start()\n{\n+    MutexLocker lock(m_threadCreationMutex);\n+\nif (m_threadID)\nreturn true;\n-\n+\nm_threadID = createThread(DatabaseThread::databaseThreadStart, this);\n\nreturn m_threadID;\n@@ -64,7 +66,7 @@ void DatabaseThread::requestTermination(\n\nbool DatabaseThread::terminationRequested() const\n{\n-    return m_queue.killed();\n+    return m_queue.killed();\n}\n\nvoid* DatabaseThread::databaseThreadStart(void* vDatabaseThread)\n@@ -75,7 +77,11 @@ void* DatabaseThread::databaseThreadStar\n\nvoid* DatabaseThread::databaseThread()\n{\n-    LOG(StorageAPI, "Starting DatabaseThread %p", this);\n+    {\n+        // Wait for DatabaseThread::start() to complete.\n+        MutexLocker lock(m_threadCreationMutex);\n+        LOG(StorageAPI, "Started DatabaseThread %p", this);\n+    }\n\nAutodrainedPool pool;\nwhile (true) {'),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/posix/FileSystemPOSIX.cpp',
  'src/3rdParty/webkit/work/WebCore/platform/posix/FileSystemPOSIX.cpp',
  "Index: src/3rdParty/webkit/work/WebCore/platform/posix/FileSystemPOSIX.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/posix/FileSystemPOSIX.cpp\n+++ src/3rdParty/webkit/work/WebCore/platform/posix/FileSystemPOSIX.cpp\n@@ -117,10 +117,13 @@ String pathByAppendingComponent(const St\n\nbool makeAllDirectories(const String& path)\n{\n+    struct stat buf;\nCString fullPath = fileSystemRepresentation(path);\n-    if (!access(fullPath.data(), F_OK))\n+    if ((stat(fullPath.data(), &buf) != -1)\n+        && (S_ISDIR(buf.st_mode)))\n+    {\nreturn true;\n-\n+    }\nchar* p = fullPath.mutableData() + 1;\nint length = fullPath.length();\n\n@@ -129,15 +132,25 @@ bool makeAllDirectories(const String& pa\nfor (; *p; ++p)\nif (*p == '/') {\n*p = '\\0';\n-            if (access(fullPath.data(), F_OK))\n-                if (mkdir(fullPath.data(), S_IRWXU))\n+            if ((stat(fullPath.data(), &buf) == -1)\n+                || (!S_ISDIR(buf.st_mode)))\n+            {\n+                if (mkdir(fullPath.data(), S_IRWXU|S_IRWXG|S_IRWXO))\n+                {\nreturn false;\n+                }\n+            }\n*p = '/';\n}\n-    if (access(fullPath.data(), F_OK))\n-        if (mkdir(fullPath.data(), S_IRWXU))\n-            return false;\n\n+    if ((stat(fullPath.data(), &buf) == -1)\n+                || (!S_ISDIR(buf.st_mode)))\n+\t{\n+        if (mkdir(fullPath.data(), S_IRWXU|S_IRWXG|S_IRWXO))\n+\t\t{\n+            return false;\n+\t\t}\n+\t}\nreturn true;\n}\n"),
 ('src.orig/3rdParty/webkit/work/WebCore/platform/pthreads/ThreadingPthreads.cpp',
  'src/3rdParty/webkit/work/WebCore/platform/pthreads/ThreadingPthreads.cpp',
  'Index: src/3rdParty/webkit/work/WebCore/platform/pthreads/ThreadingPthreads.cpp\n===================================================================\n--- src.orig/3rdParty/webkit/work/WebCore/platform/pthreads/ThreadingPthreads.cpp\n+++ src/3rdParty/webkit/work/WebCore/platform/pthreads/ThreadingPthreads.cpp\n@@ -34,6 +34,10 @@\n\n#include <errno.h>\n\n+namespace ekioh {\n+    void callOnMainThread(WebCore::MainThreadFunction function, void* context);\n+}\n+\nnamespace WebCore {\n\nstatic Mutex& threadMapMutex()\n@@ -134,6 +138,11 @@ ThreadIdentifier currentThread()\nreturn establishIdentifierForPthreadHandle(currentThread);\n}\n\n+void callOnMainThread(MainThreadFunction* function, void* context)\n+{\n+    ekioh::callOnMainThread(function, context);\n+}\n+\nMutex::Mutex()\n{\npthread_mutex_init(&m_mutex, NULL);')]