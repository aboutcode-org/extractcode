[('src.orig/3rdParty/SpiderMonkey/patches/ekioh-config.patch',
  'src/3rdParty/SpiderMonkey/patches/ekioh-config.patch',
  'Index: src/3rdParty/SpiderMonkey/patches/ekioh-config.patch\n===================================================================\n--- src.orig/3rdParty/SpiderMonkey/patches/ekioh-config.patch\n+++ src/3rdParty/SpiderMonkey/patches/ekioh-config.patch\n@@ -4,7 +4,7 @@ Index: work/js/src/EKjsconfig.h\n===================================================================\n--- /dev/null\n+++ work/js/src/EKjsconfig.h\n-@@ -0,0 +1,99 @@\n+@@ -0,0 +1,224 @@\n+/*\n+ *  EKjsconfig.h\n+ *  Ekioh\n@@ -16,8 +16,133 @@ Index: work/js/src/EKjsconfig.h\n+#ifndef EKJSCONFIG_H\n+#define EKJSCONFIG_H\n+\n-+#include "EKPlatformDefs.h"\n-+#include "EKCpuDefs.h"\n++#if defined EK_PORT_CPU_DEFS\n++\n++// EKPortDefs.h has taken care of the CPU specific definitions, so suppress\n++// everything here.\n++\n++#elif defined(__powerpc64__)\n++\n++#define EK_BIG_ENDIAN 1\n++#define EK_LITTLE_ENDIAN 0\n++\n++#define EK_BYTES_PER_LONG 8\n++#define EK_BYTES_PER_WORD 8\n++#define EK_BITS_PER_WORD 64\n++#define EK_BITS_PER_WORD_LOG2 6\n++#define EK_ALIGN_OF_POINTER 8\n++\n++#define EK_BYTES_PER_SIZE_T 8\n++\n++\n++\n++#elif defined(__powerpc__) || \\\n++      defined(__POWERPC__)\n++\n++#define EK_BIG_ENDIAN 1\n++#define EK_LITTLE_ENDIAN 0\n++\n++#define EK_BYTES_PER_LONG 4\n++#define EK_BYTES_PER_WORD 4\n++#define EK_BITS_PER_WORD 32\n++#define EK_BITS_PER_WORD_LOG2 5\n++#define EK_ALIGN_OF_POINTER 4\n++\n++#define EK_BYTES_PER_SIZE_T 4\n++\n++\n++\n++#elif defined(__x86_64__) || \\\n++      defined(__ia64__)   || \\\n++      defined(_M_IA64)    || \\\n++      defined(_M_X64)\n++\n++#define EK_BIG_ENDIAN 0\n++#define EK_LITTLE_ENDIAN 1\n++\n++#define EK_BYTES_PER_LONG 8\n++#define EK_BYTES_PER_WORD 8\n++#define EK_BITS_PER_WORD 64\n++#define EK_BITS_PER_WORD_LOG2 6\n++#define EK_ALIGN_OF_POINTER 8\n++\n++#define EK_BYTES_PER_SIZE_T 8\n++\n++\n++\n++#elif defined(__i386__) || \\\n++      defined(_M_IX86)\n++\n++#define EK_BIG_ENDIAN 0\n++#define EK_LITTLE_ENDIAN 1\n++\n++#define EK_BYTES_PER_LONG 4\n++#define EK_BYTES_PER_WORD 4\n++#define EK_BITS_PER_WORD 32\n++#define EK_BITS_PER_WORD_LOG2 5\n++#define EK_ALIGN_OF_POINTER 4\n++\n++#define EK_BYTES_PER_SIZE_T 4\n++\n++\n++\n++#elif defined(__arm__) || \\\n++      defined(__MARM__)\n++\n++#if defined (__ARMEL__)\n++#  define EK_BIG_ENDIAN 0\n++#  define EK_LITTLE_ENDIAN 1\n++#elif defined (__ARMEB__)\n++#  define EK_BIG_ENDIAN 1\n++#  define EK_LITTLE_ENDIAN 0\n++#else\n++#  error "Unknown ARM endian"\n++#endif\n++\n++#define EK_BYTES_PER_LONG 4\n++#define EK_BYTES_PER_WORD 4\n++#define EK_BITS_PER_WORD 32\n++#define EK_BITS_PER_WORD_LOG2 5\n++#define EK_ALIGN_OF_POINTER 4\n++\n++#define EK_BYTES_PER_SIZE_T 4\n++\n++\n++\n++#elif defined(__mips__)\n++\n++#define EK_BIG_ENDIAN 0\n++#define EK_LITTLE_ENDIAN 1\n++\n++#define EK_BYTES_PER_LONG 4\n++#define EK_BYTES_PER_WORD 4\n++#define EK_BITS_PER_WORD 32\n++#define EK_BITS_PER_WORD_LOG2 5\n++#define EK_ALIGN_OF_POINTER 4\n++\n++#define EK_BYTES_PER_SIZE_T 4\n++\n++\n++\n++#elif defined(__sh__)\n++\n++#define EK_BIG_ENDIAN 0\n++#define EK_LITTLE_ENDIAN 1\n++\n++#define EK_BYTES_PER_LONG 4\n++#define EK_BYTES_PER_WORD 4\n++#define EK_BITS_PER_WORD 32\n++#define EK_BITS_PER_WORD_LOG2 5\n++#define EK_ALIGN_OF_POINTER 4\n++\n++#define EK_BYTES_PER_SIZE_T 4\n++\n++#else\n++\n++#error "Unknown CPU architecture"\n++\n++#endif\n++\n+#include "EKTypes.h"\n+\n+#if EK_LITTLE_ENDIAN')]