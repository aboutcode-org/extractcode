[('Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.css',
  'Documents and Settings/Boki/Desktop/head/patches/js delete/imagefield.css',
  'diff -Nup C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\imagefield/imagefield.css C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\js delete/imagefield.css\n--- Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.css\n+++ Documents and Settings/Boki/Desktop/head/patches/js delete/imagefield.css\n@@ -28,3 +28,11 @@ div.imagefield-edit-image-detail {\ndiv.imagefield-edit-image-flags div.form-item {\nfloat: right;\n}\n+\n+.delete-button {\n+  visibility: hidden;\n+}\n+\n+html.js .delete-button {\n+  visibility: visible;\n+}'),
 ('Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.module',
  'Documents and Settings/Boki/Desktop/head/patches/js delete/imagefield.module',
  'diff -Nup C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\imagefield/imagefield.module C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\js delete/imagefield.module\n--- Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.module\n+++ Documents and Settings/Boki/Desktop/head/patches/js delete/imagefield.module\n@@ -540,6 +540,7 @@ function _imagefield_widget_prepare_form\nfunction _imagefield_widget_form($node, $field, &$items) {\ndrupal_add_js(\'misc/progress.js\');\ndrupal_add_js(\'misc/upload.js\');\n+  drupal_add_js(drupal_get_path(\'module\', \'imagefield\') . \'/imagefield_delete.js\');\n\n$fieldname = $field[\'field_name\'];\ndrupal_add_css(drupal_get_path(\'module\', \'imagefield\') .\'/imagefield.css\');\n@@ -586,6 +587,7 @@ function _imagefield_widget_form($node,\n// @todo split following if block into its own function.\n// Store the file data object to be carried on.\nif (is_array($items) && count($items)) {\n+    $displayed_entries = 0;\nforeach($items as $delta => $file) {\nif ($file[\'filepath\'] && !$file[\'flags\'][\'delete\']) {\n$form[$fieldname][$delta] = array (\n@@ -597,19 +599,12 @@ function _imagefield_widget_form($node,\n\'#title\' => t(\'Delete\'),\n\'#default_value\' => 0,\n);\n-\n-        if (function_exists(\'token_replace\')) {\n-          global $user;\n-          $filename = $file[\'fid\'] == \'upload\' ? file_create_filename($file[\'filename\'], file_create_path(token_replace($field[\'widget\'][\'image_path\'], \'user\', $user))) : $file[\'filepath\'];\n-        } else {\n-          $filename = $file[\'fid\'] == \'upload\' ? file_create_filename($file[\'filename\'], file_create_path($field[\'widget\'][\'image_path\'])) : $file[\'filepath\'];\n-        }\n\n$form[$fieldname][$delta][\'preview\'] = array(\n\'#type\' => \'markup\',\n-          \'#value\' => theme(\'imagefield_image\', $file, $file[\'alt\'], $file[\'title\'], array(\'width\' => \'150\'), FALSE),\n+          \'#value\' => theme(\'imagefield_image\', $file, $file[\'alt\'], $file[\'title\'], array(/*\'width\' => \'150\'*/), FALSE, TRUE),\n);\n-\n+\n$form[$fieldname][$delta][\'description\'] = array(\n\'#type\' => \'markup\',\n\'#value\' => \'<strong>\' . t(\'Filename: \') . \'</strong>\' . $file[\'filename\'],\n@@ -630,7 +625,7 @@ function _imagefield_widget_form($node,\n\'#size\' => 10,\n);\n}\n-\n+\n$form[$fieldname][$delta][\'title\'] = array(\n\'#type\' => \'hidden\',\n\'#value\' => $file[\'filename\'],\n@@ -646,7 +641,7 @@ function _imagefield_widget_form($node,\n\'#size\' => 10,\n);\n}\n-\n+\n// Special handling for single value fields\nif (!$field[\'multiple\']) {\n$form[$fieldname][$delta][\'replace\'] = array(\n@@ -654,22 +649,47 @@ function _imagefield_widget_form($node,\n\'#value\' => t(\'If a new image is chosen, the current image will be replaced upon submitting the form.\'),\n);\n}\n+\n+        $displayed_entries++;\n}\nelseif ($file[\'filepath\'] && $file[\'flags\'][\'delete\']) {\n// Hide all the form values if this item is marked for deletion\n-        $form[$fieldname][$delta][\'flags\'][\'delete\'] = array(\'#type\' => \'value\', \'#value\' => $file[\'flags\'][\'delete\']);\n-        $form[$fieldname][$delta][\'title\'] = array(\'#type\' => \'value\', \'#value\' => $file[\'title\']);\n-        $form[$fieldname][$delta][\'alt\'] = array(\'#type\' => \'value\', \'#value\' => $file[\'alt\']);\n+        $form[$fieldname][$delta][\'flags\'][\'delete\'] = array(\'#type\' => \'hidden\', \'#value\' => $file[\'flags\'][\'delete\']);\n+        $form[$fieldname][$delta][\'title\'] = array(\'#type\' => \'hidden\', \'#value\' => $file[\'title\']);\n+        $form[$fieldname][$delta][\'alt\'] = array(\'#type\' => \'hidden\', \'#value\' => $file[\'alt\']);\n}\nif (isset($file[\'sessionid\'])) {\n$form[$fieldname][$delta][\'sessionid\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'sessionid\']);\n}\n+\n$form[$fieldname][$delta][\'filename\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filename\']);\n$form[$fieldname][$delta][\'filepath\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filepath\']);\n$form[$fieldname][$delta][\'filemime\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filemime\']);\n$form[$fieldname][$delta][\'filesize\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filesize\']);\n$form[$fieldname][$delta][\'fid\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'fid\']);\n}\n+\n+    if($displayed_entries > 0) {\n+      $form[$fieldname][\'delete\'] = array(\n+         \'#tree\' => FALSE,\n+        \'#prefix\' => \'<div id="\'. form_clean_id($fieldname .\'-delete-hide\') .\'" style="float:right; padding-bottom:50px;">\',\n+        \'#suffix\' => \'</div>\',\n+        \'#weight\' => 41\n+        );\n+\n+      $form[$fieldname][\'delete\'][\'delete\'] = array(\n+        \'#type\' => \'button\',\n+        \'#value\' => t(\'Delete selected images.\'),\n+        \'#name\' => \'cck_imagefield_\'.$fieldname.\'_op\',\n+        \'#id\' => form_clean_id($fieldname .\'-delete-button\'),\n+        \'#tree\' => FALSE,\n+        \'#weight\' => 40,\n+        \'#attributes\' => array(\'class\' => \'delete-button\')\n+       );\n+\n+      // The class triggers the js delete behaviour.\n+      $form[$fieldname .\'-delete-url\'] = array(\'#type\' => \'hidden\', \'#value\' => url(\'imagefield/js/delete\', NULL, NULL, TRUE), \'#attributes\' => array(\'class\' => \'delete\'));\n+    }\n}\n\n// The class triggers the js upload behaviour.\n@@ -932,4 +952,81 @@ function imagefield_js() {\nprint drupal_to_js(array(\'status\' => TRUE, \'data\' => $output));\nexit;\n\n+}\n+\n+/**\n+ * Menu-callback for JavaScript-based delete operations.\n+ */\n+function imagefield_js_delete() {\n+  // Parse fieldname from submit button.\n+  $matches = array();\n+  foreach(array_keys($_POST) as $key) {\n+    if (preg_match(\'/cck_imagefield_(.*)_op/\', $key, $matches)) {\n+      break;\n+    }\n+  }\n+  $fieldname = $matches[1];\n+\n+  $node = (object)$_POST;\n+  // Load field data.\n+  $field = content_fields($fieldname, $node->type);\n+  // Load fid\'s stored by content.module\n+  $items = array();\n+  $values  = content_field(\'load\', $node, $field, $items, FALSE, FALSE);\n+  $items = $values[$fieldname];\n+\n+  // Load additional field data\n+  imagefield_field(\'load\', $node, $field, $items, FALSE, FALSE);\n+  _imagefield_widget_prepare_form_values($node, $field, $items);\n+\n+  foreach($node->{$fieldname} as $key => $image) {\n+    if($image[\'flags\'][\'delete\'] == TRUE) {\n+      // Delete the image\n+      _imagefield_file_delete($items[$key], $fieldname);\n+\n+      // Remove the image from the CCK table.\n+      if (is_numeric($items[$key][\'fid\'])) {\n+        $db_info = content_database_info($field);\n+        $table_name = $db_info[\'table\'];\n+\n+        $fid_name = $fieldname . \'_fid\';\n+        $title_name = $fieldname . \'_title\';\n+        $alt_name = $fieldname . \'_alt\';\n+        $thumbpath_name = $fieldname . \'_thumbpath\';\n+\n+        if(strpos($table_name, \'content_field\') !== false) {\n+          db_query(\'DELETE FROM {\' . $table_name . \'} WHERE \' . $fid_name . \' = %d\', $items[$key][\'fid\']);\n+        }\n+        else if(strpos($table_name, \'content_type\') !== false) {\n+          db_query(\'UPDATE {\' . $table_name . \'} SET \' . $fid_name . \' = "", \' . $title_name . \' = "", \' . $alt_name . \' = "", \' . $thumbpath_name . \' = "" WHERE nid = %d\', array($node->nid));\n+        }\n+      }\n+\n+      // Remove it from the $items array so it doesn\'t get displayed in the form.\n+      unset($items[$key]);\n+    }\n+    // Set the alt and title from POST\n+    $items[$key][\'alt\'] = $image[\'alt\'];\n+    $items[$key][\'title\'] = $image[\'title\'];\n+  }\n+\n+  // Clear the cache\n+  cache_clear_all(\'content:\'. $node->nid .\':\'. $node->vid, \'cache\');\n+  cache_clear_all(\'content:\'. $node->nid .\':\'. $node->vid, \'cache_content\');\n+\n+  // Get our new form baby, yeah tiger, get em!\n+  $form = _imagefield_widget_form($node, $field, $items);\n+\n+  foreach (module_implements(\'form_alter\') as $module) {\n+    $function = $module .\'_form_alter\';\n+    $function(\'imagefield_js_delete\', $form);\n+  }\n+  $form = form_builder(\'imagefield_js_delete\', $form);\n+\n+  $output =  theme(\'status_messages\') . drupal_render($form);\n+\n+  // We send the updated file attachments form.\n+  print drupal_to_js(array(\'status\' => TRUE, \'data\' => $output));\n+\n+  exit;\n}'),
 ('Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield_delete.js',
  'Documents and Settings/Boki/Desktop/head/patches/js delete/imagefield_delete.js',
  "\\ No newline at end of file\ndiff -Nup C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\imagefield/imagefield_delete.js C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\js delete/imagefield_delete.js\n--- Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield_delete.js\n+++ Documents and Settings/Boki/Desktop/head/patches/js delete/imagefield_delete.js\n@@ -0,0 +1,121 @@\n+/**\n+ * Extend jsUpload.oncomplete from upload.js to attach the needed behaviour.\n+ */\n+Drupal.jsUpload.prototype.jsUploadCompleteOriginal = Drupal.jsUpload.prototype.oncomplete;\n+\n+Drupal.jsUpload.prototype.oncomplete = function (data) {\n+  this.jsUploadCompleteOriginal(data);\n+  Drupal.deleteAutoAttach();\n+}\n+\n+\n+/**\n+ * Attaches the delete behaviour to the delete form.\n+ */\n+Drupal.deleteAutoAttach = function() {\n+  var button = new Array();\n+  var wrapper = new Array();\n+  var hide = new Array;\n+  var deletes = new Array();\n+\n+  $('input.delete').each(function () {\n+    var uri = this.value;\n+\n+    // Extract the base name from the id (edit-attach-url -> attach).\n+    var base = this.id.substring(5, this.id.length - 11);\n+\n+    button[base] = base + '-delete-button';\n+    wrapper[base] = base + '-attach-wrapper';\n+    hide[base] = base + '-delete-hide';\n+\n+    if($('#' + button[base]).get(0)) { // bugfix for FF, see if the button exists\n+        deletes[base] = new Drupal.jsDelete(uri, button[base], wrapper[base], hide[base], base);\n+    }\n+  });\n+}\n+\n+/**\n+ * JS delete object.\n+ */\n+Drupal.jsDelete = function(uri, button, wrapper, hide, base) {\n+  // Note: these elements are replaced after an delete, so we re-select them\n+  // everytime they are needed.\n+  this.button = '#'+ button;\n+  this.wrapper = '#'+ wrapper;\n+  this.hide = '#'+ hide;\n+  Drupal.redirectFormButton(uri, $(this.button).get(0), this, base);\n+}\n+\n+/**\n+ * Handler for the form redirection submission.\n+ */\n+Drupal.jsDelete.prototype.onsubmit = function () {\n+  // Insert progressbar and stretch to take the same space.\n+  this.progress = new Drupal.progressBar('deleteprogress');\n+  this.progress.setProgress(-1, 'Deleting...');\n+\n+  var hide = this.hide;\n+  var el = this.progress.element;\n+  var offset = $(hide).get(0).offsetHeight;\n+  $(el).css({\n+    width: '10em',\n+    height: offset +'px',\n+    paddingTop: '10px',\n+    display: 'none',\n+    float: 'right'\n+  })\n+\n+  positions = Drupal.absolutePosition($(this.hide).get(0));\n+\n+  $(hide).css({\n+    position: 'absolute',\n+    left: positions.x+'px',\n+    top: positions.y+'px'\n+  });\n+\n+  $(hide).after(el);\n+  $(hide).fadeOut('slow');\n+  $(el).fadeIn('slow');\n+}\n+\n+/**\n+ * Handler for the form redirection completion.\n+ */\n+Drupal.jsDelete.prototype.oncomplete = function (data, base) {\n+  Drupal.freezeHeight(); // Avoid unnecessary scrolling\n+\n+  // Place HTML into temporary div\n+  var div = document.createElement('div');\n+  $(div).html(data);\n+\n+  // Replace form and re-attach behaviour\n+  $(div).hide();\n+  $(this.wrapper).html('');\n+  $(this.wrapper).append(div);\n+  $(div).fadeIn('slow');\n+  Drupal.deleteAutoAttach();\n+  Drupal.uploadAutoAttach();\n+\n+  Drupal.unfreezeHeight();\n+}\n+\n+/**\n+ * Handler for the form redirection error.\n+ */\n+Drupal.jsDelete.prototype.onerror = function (error) {\n+  alert('An error occurred:\\n\\n'+ error);\n+  // Remove progressbar\n+  $(this.progress.element).remove();\n+  this.progress = null;\n+  // Undo hide\n+  $(this.hide).css({\n+    position: 'static',\n+    left: '0px'\n+  });\n+}\n+\n+\n+// Global killswitch\n+if (Drupal.jsEnabled) {\n+  $(document).ready(Drupal.deleteAutoAttach);\n+}")]