[('Documents and Settings/Administrator/Desktop/siftDemoV4_old/defs.h',
  'Documents and Settings/Administrator/Desktop/siftDemoV4/defs.h',
  '--- Documents and Settings/Administrator/Desktop/siftDemoV4_old/defs.h\n+++ Documents and Settings/Administrator/Desktop/siftDemoV4/defs.h\n@@ -58,3 +58,4 @@\nvoid DrawLine(Image image, int r1, int c1, int r2, int c2);\nKeypoint ReadKeyFile(char *filename);\nKeypoint ReadKeys(FILE *fp);\n+FILE *OpenOutputFile(char *filename);'),
 ('Documents and Settings/Administrator/Desktop/siftDemoV4_old/match.c',
  'Documents and Settings/Administrator/Desktop/siftDemoV4/match.c',
  '--- Documents and Settings/Administrator/Desktop/siftDemoV4_old/match.c\n+++ Documents and Settings/Administrator/Desktop/siftDemoV4/match.c\n@@ -12,7 +12,7 @@\n\n/* -------------------- Local function prototypes ------------------------ */\n\n-void FindMatches(Image im1, Keypoint keys1, Image im2, Keypoint keys2);\n+void FindMatches(Image im1, Keypoint keys1, Image im2, Keypoint keys2, FILE *fp);\nKeypoint CheckForMatch(Keypoint key, Keypoint klist);\nint DistSquared(Keypoint k1, Keypoint k2);\nImage CombineImagesVertically(Image im1, Image im2);\n@@ -28,6 +28,7 @@\nint arg = 0;\nImage im1 = NULL, im2 = NULL;\nKeypoint k1 = NULL, k2 = NULL;\n+\tFILE *fp = NULL;\n\n/* Parse command line arguments and read given files.  The command\nline must specify two input images and two files of keypoints\n@@ -43,13 +44,15 @@\nk1 = ReadKeyFile(argv[++arg]);\nelse if (! strcmp(argv[arg], "-k2"))\nk2 = ReadKeyFile(argv[++arg]);\n-      else\n+      else if (! strcmp(argv[arg], "-o"))\n+\tfp = OpenOutputFile(argv[++arg]);\n+\t  else\nFatalError("Invalid command line argument: %s", argv[arg]);\n}\n-    if (im1 == NULL || im2 == NULL || k1 == NULL || k2 == NULL)\n-      FatalError("Command line does not specify all images and keys.");\n+    if (im1 == NULL || im2 == NULL || k1 == NULL || k2 == NULL || fp == NULL)\n+      FatalError("Command line does not specify all images, keys or output");\n\n-    FindMatches(im1, k1, im2, k2);\n+    FindMatches(im1, k1, im2, k2, fp);\nexit(0);\n}\n\n@@ -58,7 +61,7 @@\nfrom one image and find its closest match in the second set of\nkeypoints.  Then write the result to a file.\n*/\n-void FindMatches(Image im1, Keypoint keys1, Image im2, Keypoint keys2)\n+void FindMatches(Image im1, Keypoint keys1, Image im2, Keypoint keys2, FILE *fp)\n{\nKeypoint k, match;\nImage result;\n@@ -84,7 +87,7 @@\n}\n\n/* Write result image to standard output. */\n-    WritePGM(stdout, result);\n+    WritePGM(fp, result);\nfprintf(stderr,"Found %d matches.\\n", count);\n}\n'),
 ('Documents and Settings/Administrator/Desktop/siftDemoV4_old/util.c',
  'Documents and Settings/Administrator/Desktop/siftDemoV4/util.c',
  '--- Documents and Settings/Administrator/Desktop/siftDemoV4_old/util.c\n+++ Documents and Settings/Administrator/Desktop/siftDemoV4/util.c\n@@ -78,6 +78,25 @@\nreturn (m);\n}\n\n+/*----------------- Open output PGM file ------------------------*/\n+\n+\n+/* This opens a PGM file from a given filename and returns the file pointer\n+*/\n+FILE *OpenOutputFile(char *filename)\n+{\n+    FILE *file;\n+\n+    /* The "b" option is for binary input, which is needed if this is\n+       compiled under Windows.  It has no effect in Linux.\n+    */\n+    file = fopen (filename, "wb");\n+    if (! file)\n+\tFatalError("Could not open file: %s", filename);\n+\n+    return file;\n+}\n+\n\n/*----------------- Read and write PGM files ------------------------*/\n')]