[('Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.install',
  'Documents and Settings/Boki/Desktop/head/patches/thumbnails support/imagefield.install',
  'diff -Nup C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\imagefield/imagefield.install C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\thumbnails support/imagefield.install\n--- Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.install\n+++ Documents and Settings/Boki/Desktop/head/patches/thumbnails support/imagefield.install\n@@ -36,9 +36,6 @@ function imagefield_update_1() {\n}\n\n\n-\n-\n-\n/**\n* Schema change to enable alt and title tags.\n*/\n@@ -73,4 +70,40 @@ function imagefield_update_2() {\nreturn $ret;\n}\n\n+/**\n+ * Schema change to enable thumbnail support\n+ */\n+\n+function imagefield_update_3() {\n+  $ret = array();\n+\n+  include_once(drupal_get_path(\'module\', \'content\') .\'/content.module\');\n+  include_once(drupal_get_path(\'module\', \'content\') .\'/content_admin.inc\');\n+\n+  $fields = content_fields();\n+\n+  foreach ($fields as $field) {\n+    switch ($field[\'type\']) {\n+      case \'image\':\n+        $oldcolumns = array(\n+          \'fid\' => array(\'type\' => \'int\', \'not null\' => TRUE, \'default\' => \'0\'),\n+          \'title\' => array(\'type\' => \'varchar\', \'length\' => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n+          \'alt\' => array(\'type\' => \'varchar\', \'length\' => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n+        );\n+        $newcolumns = array(\n+          \'fid\' => array(\'type\' => \'int\', \'not null\' => TRUE, \'default\' => \'0\'),\n+          \'title\' => array(\'type\' => \'varchar\', \'length\' => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n+          \'alt\' => array(\'type\' => \'varchar\', \'length\' => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n+          \'thumbpath\' => array(\'type\' => \'varchar\', \'length\' => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n+        );\n+        content_alter_db_field($field, $oldcolumns, $field, $newcolumns);\n+        break;\n+    }\n+    drupal_set_message(\'altered: <br /><pre>\'. print_r($field, true) .\'</pre>\');\n+  }\n+\n+\n+  db_query(\'DELETE FROM {cache}\');\n+  return $ret;\n+}\n'),
 ('Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.module',
  'Documents and Settings/Boki/Desktop/head/patches/thumbnails support/imagefield.module',
  'diff -Nup C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\imagefield/imagefield.module C:\\Documents and Settings\\Boki\\Desktop\\head\\patches\\thumbnails support/imagefield.module\n--- Documents and Settings/Boki/Desktop/head/patches/imagefield/imagefield.module\n+++ Documents and Settings/Boki/Desktop/head/patches/thumbnails support/imagefield.module\n@@ -60,8 +60,14 @@ function _imagefield_preview($filepath)\nforeach ($_SESSION[\'imagefield\'] as $fieldname => $files) {\nforeach ($files as $delta => $file) {\nif ($file[\'preview\'] == $filepath) {\n+        if($file[\'preview_thumbnail\'] == TRUE) {\n+          file_transfer($file[\'thumbpath\'], array(\'Content-Type: \'. mime_header_encode($file[\'filemime\']),\n+                                                 \'Content-Length: \'. $file[\'thumbsize\']));\n+        }\n+        else {\nfile_transfer($file[\'filepath\'], array(\'Content-Type: \'. mime_header_encode($file[\'filemime\']),\n\'Content-Length: \'. $file[\'filesize\']));\n+        }\nexit();\n}\n}\n@@ -99,6 +105,7 @@ function imagefield_field_settings($op,\n\'fid\' => array(\'type\' => \'int\', \'not null\' => TRUE, \'default\' => \'0\'),\n\'title\' => array(\'type\' => \'varchar\', length => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n\'alt\' => array(\'type\' => \'varchar\', length => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n+        \'thumbpath\' => array(\'type\' => \'varchar\', length => 255, \'not null\' => TRUE, \'default\' => "\'\'", \'sortable\' => TRUE),\n);\nreturn $columns;\n}\n@@ -109,6 +116,7 @@ function imagefield_default_item() {\n\'fid\' => 0,\n\'title\' => \'\',\n\'alt\' => \'\',\n+    \'thumbpath\' => \'\',\n);\n}\n\n@@ -136,6 +144,18 @@ function imagefield_file_insert($node, &\n\nif (imagefield_check_directory($widget_image_path) && $file = file_save_upload((object)$file, $filepath)) {\n$file = (array)$file;\n+\n+    $thumbpath = file_create_path($widget_image_path) . \'/\' . _imagefield_create_thumbname($file[\'filename\']);\n+\n+    // Move the thumbnail from the temp folder to the images folder.\n+    if(is_file($file[\'thumbpath\'])) {\n+      file_move($file[\'thumbpath\'], $thumbpath);\n+      $file[\'thumbpath\'] = $thumbpath;\n+    }\n+    else {\n+      $file[\'thumbpath\'] = \'\';\n+    }\n+\n$file[\'fid\'] = db_next_id(\'{files}_fid\');\ndb_query("INSERT into {files} (fid, nid, filename, filepath, filemime, filesize)\nVALUES (%d, %d, \'%s\',\'%s\',\'%s\',%d)",\n@@ -278,6 +298,15 @@ function imagefield_widget_settings($op,\n\'#description\' =>\nt(\'The maximum allowed image size expressed as WIDTHxHEIGHT (e.g. 640x480). Set to 0 for no restriction.\')\n);\n+      $form[\'thumbnail_resolution\'] = array (\n+        \'#type\' => \'textfield\',\n+        \'#title\' => t(\'Maximum resolution for thumbnails\'),\n+        \'#default_value\' => $widget[\'thumbnail_resolution\'] ? $widget[\'thumbnail_resolution\'] : \'120x120\',\n+        \'#size\' => 15,\n+        \'#maxlength\' => 10,\n+        \'#description\' =>\n+        t(\'The maximum thumbnails size resolution expressed as WIDTHxHEIGHT (e.g. 100x50).\')\n+      );\n$form[\'image_path\'] = array(\n\'#type\' => \'textfield\',\n\'#title\' => t(\'Image path\'),\n@@ -353,7 +382,7 @@ function imagefield_widget_settings($op,\nbreak;\n\ncase \'save\':\n-      return array(\'max_resolution\', \'image_path\', \'file_extensions\', \'custom_alt\', \'custom_title\', \'use_default_image\', \'default_image\');\n+      return array(\'max_resolution\', \'thumbnail_resolution\', \'image_path\', \'file_extensions\', \'custom_alt\', \'custom_title\', \'use_default_image\', \'default_image\');\n}\n}\n\n@@ -431,6 +460,9 @@ function imagefield_clear_field_session(\nif (is_file($file[\'filepath\'])) {\nfile_delete($file[\'filepath\']);\n}\n+      if (is_file($file[\'thumbpath\'])) {\n+\t  file_delete($file[\'thumbpath\']);\n+      }\n}\nunset($_SESSION[\'imagefield\'][$fieldname]);\n}\n@@ -443,6 +475,7 @@ function _imagefield_file_delete($file,\nelse {\nunset($_SESSION[\'imagefield\'][$fieldname][$file[\'sessionid\']]);\n}\n+  file_delete($file[\'thumbpath\']);\nreturn file_delete($file[\'filepath\']);\n}\n\n@@ -486,19 +519,52 @@ function _imagefield_widget_prepare_form\n\nif ($valid_image) {\n$file = _imagefield_scale_image($file, $field[\'widget\'][\'max_resolution\']);\n+\n+      $file[\'preview_thumbnail\'] = TRUE;\n+      $file[\'thumbpath\'] = $file[\'filepath\'] . \'_thumb\';\n\n-      // Create the filepath for the image preview\n+      // Create the filepath and thumbpath for the image preview\nif (function_exists(\'token_replace\')) {\n// use tokenized paths if token module is installed.\nglobal $user;\n-        $filepath = file_create_filename($file[\'filename\'], file_create_path(token_replace($field[\'widget\'][\'image_path\'], \'user\', $user)));\n+        $path = file_create_path(token_replace($field[\'widget\'][\'image_path\'], \'user\', $user));\n}\nelse {\n-        $filepath = file_create_filename($file[\'filename\'], file_create_path($field[\'widget\'][\'image_path\']));\n+        $path = file_create_path($field[\'widget\'][\'image_path\']);\n+      }\n+\n+      $filepath = file_create_filename($file[\'filename\'], $path);\n+      $thumbpath = file_create_filename(_imagefield_create_thumbname($file[\'filename\']), $path);\n+\n+      // Sometimes thumbnail_resolution is empty, if after module update the field settings aren\'t resaved\n+      $thumbnail_resolution = $field[\'widget\'][\'thumbnail_resolution\'] ? $field[\'widget\'][\'thumbnail_resolution\'] : \'120x120\';\n+      list($twidth, $theight) = explode(\'x\', str_replace(\'X\', \'x\', $thumbnail_resolution));\n+      list($width, $height, $type, $image_attributes) = @getimagesize($file[\'filepath\']);\n+\n+       // only attempt to create the thumb if the image is bigger than the thumb size\n+      if($twidth < $width && $theight < $height) {\n+        // Create the thumbnail and place it in the temp folder\n+        if(!image_scale($file[\'filepath\'], $file[\'thumbpath\'], $twidth, $theight)) {\n+          drupal_set_message(\'The thumbnail for \' . $file[\'filename\'] . \' could not be created.\', \'error\');\n+        }\n+        else {\n+          $file[\'thumbsize\'] = filesize($file[\'thumbpath\']);\n+        }\n+      }\n+\n+      if(!is_file($file[\'thumbpath\'])) {\n+        $file[\'preview_thumbnail\'] = FALSE;\n+        unset($file[\'thumbpath\']);\n}\n\n$file[\'fid\'] = \'upload\';\n-      $file[\'preview\'] = $filepath;\n+\n+      if($file[\'preview_thumbnail\'] == TRUE) {\n+        $file[\'preview\'] = $thumbpath;\n+      }\n+      else {\n+        $file[\'preview\'] = $filepath;\n+      }\n\n// If a single field, mark any other images for deletion and delete files in session\nif (!$field[\'multiple\']) {\n@@ -668,6 +734,7 @@ function _imagefield_widget_form($node,\n$form[$fieldname][$delta][\'filepath\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filepath\']);\n$form[$fieldname][$delta][\'filemime\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filemime\']);\n$form[$fieldname][$delta][\'filesize\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'filesize\']);\n+      $form[$fieldname][$delta][\'thumbpath\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'thumbpath\']);\n$form[$fieldname][$delta][\'fid\'] = array(\'#type\' => \'value\',  \'#value\' => $file[\'fid\']);\n}\n}\n@@ -816,7 +883,28 @@ function theme_imagefield_edit_image_row\n\nfunction theme_imagefield_image($file, $alt = \'\', $title = \'\', $attributes = NULL, $getsize = TRUE) {\n$file = (array)$file;\n-  if (is_file($file[\'filepath\']) && (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file[\'filepath\'])))) {\n+\n+  if (is_file($file[\'thumbpath\']) && (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file[\'thumbpath\'])))) {\n+     // strings to be added before and after the image tag\n+    $prefix = \'\';\n+    $sufix = \'\';\n+\n+    if($file[\'fid\'] != \'upload\') {\n+      $big_image_url = file_create_url($file[\'filepath\']);\n+      $prefix = \'<a href="\' . $big_image_url . \'">\';\n+      $sufix = \'</a>\';\n+    }\n+\n+    $attributes = drupal_attributes($attributes);\n+\n+    $path = $file[\'fid\'] == \'upload\' ? $file[\'preview\'] : $file[\'thumbpath\'];\n+    $alt = empty($alt) ? $file[\'alt\'] : $alt;\n+    $title = empty($title) ? $file[\'title\'] : $title;\n+\n+    $url = file_create_url($path);\n+    return $prefix . \'<img src="\'. check_url($url) .\'" alt="\'.\n+        check_plain($alt) .\'" title="\'. check_plain($title) .\'" \'. $image_attributes . $attributes .\' />\' . $sufix;\n+  } else if (is_file($file[\'filepath\']) && (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file[\'filepath\'])))) {\n$attributes = drupal_attributes($attributes);\n\n$path = $file[\'fid\'] == \'upload\' ? $file[\'preview\'] : $file[\'filepath\'];\n@@ -932,4 +1020,8 @@ function imagefield_js() {\nprint drupal_to_js(array(\'status\' => TRUE, \'data\' => $output));\nexit;\n\n+}\n+\n+function _imagefield_create_thumbname($filename) {\n+  return preg_replace(\'/(.+)\\.([a-zA-Z]+)/\',\'${1}_thumbnail.${2}\',$filename);\n}')]